
xfreq-avr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001742  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012a  00800060  00001742  000017d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  0080018a  0080018a  00001900  2**0
                  ALLOC
  3 .debug_aranges 00000240  00000000  00000000  00001900  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000465  00000000  00000000  00001b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000030d8  00000000  00000000  00001fa5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000160f  00000000  00000000  0000507d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001faf  00000000  00000000  0000668c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000400  00000000  00000000  0000863c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000061e  00000000  00000000  00008a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e96  00000000  00000000  0000905a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f8  00000000  00000000  00009ef0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
       2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
       4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
       6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
       8:	74 c0       	rjmp	.+232    	; 0xf2 <__vector_4>
       a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
       c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
       e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
      10:	50 c0       	rjmp	.+160    	; 0xb2 <__vector_8>
      12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
      14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
      16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
      18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
      1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
      1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
      1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
      20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
      22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
      24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
      26:	11 24       	eor	r1, r1
      28:	1f be       	out	0x3f, r1	; 63
      2a:	cf e5       	ldi	r28, 0x5F	; 95
      2c:	d4 e0       	ldi	r29, 0x04	; 4
      2e:	de bf       	out	0x3e, r29	; 62
      30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
      32:	11 e0       	ldi	r17, 0x01	; 1
      34:	a0 e6       	ldi	r26, 0x60	; 96
      36:	b0 e0       	ldi	r27, 0x00	; 0
      38:	e2 e4       	ldi	r30, 0x42	; 66
      3a:	f7 e1       	ldi	r31, 0x17	; 23
      3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
      3e:	05 90       	lpm	r0, Z+
      40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
      42:	aa 38       	cpi	r26, 0x8A	; 138
      44:	b1 07       	cpc	r27, r17
      46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
      48:	11 e0       	ldi	r17, 0x01	; 1
      4a:	aa e8       	ldi	r26, 0x8A	; 138
      4c:	b1 e0       	ldi	r27, 0x01	; 1
      4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
      50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
      52:	a1 3a       	cpi	r26, 0xA1	; 161
      54:	b1 07       	cpc	r27, r17
      56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
      58:	d7 d1       	rcall	.+942    	; 0x408 <main>
      5a:	71 cb       	rjmp	.-2334   	; 0xfffff73e <__eeprom_end+0xff7ef73e>

0000005c <__bad_interrupt>:
      5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <read_411>:
{
	unsigned char add=0;
	unsigned char i=0;


	_clear_bit(PORTC,SH_165); //recept parallen load data
      5e:	a8 98       	cbi	0x15, 0	; 21
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
      60:	81 e2       	ldi	r24, 0x21	; 33
      62:	8a 95       	dec	r24
      64:	f1 f7       	brne	.-4      	; 0x62 <read_411+0x4>
	_delay_us(10);
	_set_bit(PORTC,SH_165);  //lock it
      66:	a8 9a       	sbi	0x15, 0	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      68:	84 ec       	ldi	r24, 0xC4	; 196
      6a:	99 e0       	ldi	r25, 0x09	; 9
      6c:	01 97       	sbiw	r24, 0x01	; 1
      6e:	f1 f7       	brne	.-4      	; 0x6c <read_411+0xe>
	_delay_ms(1);

  	
	_clear_bit(HC165_PORT,CLK_165);
      70:	a9 98       	cbi	0x15, 1	; 21
      72:	40 e0       	ldi	r20, 0x00	; 0
      74:	27 e0       	ldi	r18, 0x07	; 7
      76:	30 e0       	ldi	r19, 0x00	; 0
	for (i=0;i<8;i++)
	{
		if(_test_bit(_inb(HC165_PORT),SO_165))
   			_set_bit(add,7-i); //上电后QH的值即是165的第8位值，可以直接赋值完后，给165上升沿读取下个数据
      78:	61 e0       	ldi	r22, 0x01	; 1
      7a:	70 e0       	ldi	r23, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
      7c:	57 e1       	ldi	r21, 0x17	; 23

  	
	_clear_bit(HC165_PORT,CLK_165);
	for (i=0;i<8;i++)
	{
		if(_test_bit(_inb(HC165_PORT),SO_165))
      7e:	9a 9b       	sbis	0x13, 2	; 19
      80:	08 c0       	rjmp	.+16     	; 0x92 <read_411+0x34>
   			_set_bit(add,7-i); //上电后QH的值即是165的第8位值，可以直接赋值完后，给165上升沿读取下个数据
      82:	cb 01       	movw	r24, r22
      84:	02 2e       	mov	r0, r18
      86:	02 c0       	rjmp	.+4      	; 0x8c <read_411+0x2e>
      88:	88 0f       	add	r24, r24
      8a:	99 1f       	adc	r25, r25
      8c:	0a 94       	dec	r0
      8e:	e2 f7       	brpl	.-8      	; 0x88 <read_411+0x2a>
      90:	48 2b       	or	r20, r24
   		
		_clear_bit(HC165_PORT,CLK_165);
      92:	a9 98       	cbi	0x15, 1	; 21
      94:	85 2f       	mov	r24, r21
      96:	8a 95       	dec	r24
      98:	f1 f7       	brne	.-4      	; 0x96 <read_411+0x38>
		_delay_us(7);
		_set_bit(HC165_PORT,CLK_165);
      9a:	a9 9a       	sbi	0x15, 1	; 21
      9c:	85 2f       	mov	r24, r21
      9e:	8a 95       	dec	r24
      a0:	f1 f7       	brne	.-4      	; 0x9e <read_411+0x40>
      a2:	21 50       	subi	r18, 0x01	; 1
      a4:	30 40       	sbci	r19, 0x00	; 0
	_set_bit(PORTC,SH_165);  //lock it
	_delay_ms(1);

  	
	_clear_bit(HC165_PORT,CLK_165);
	for (i=0;i<8;i++)
      a6:	8f ef       	ldi	r24, 0xFF	; 255
      a8:	2f 3f       	cpi	r18, 0xFF	; 255
      aa:	38 07       	cpc	r19, r24
      ac:	41 f7       	brne	.-48     	; 0x7e <read_411+0x20>
		_set_bit(HC165_PORT,CLK_165);
		_delay_us(7);
		
	}
	return add;
}
      ae:	84 2f       	mov	r24, r20
      b0:	08 95       	ret

000000b2 <__vector_8>:


//T1 conter the prescale output

SIGNAL(SIG_OVERFLOW1) 
{
      b2:	1f 92       	push	r1
      b4:	0f 92       	push	r0
      b6:	0f b6       	in	r0, 0x3f	; 63
      b8:	0f 92       	push	r0
      ba:	11 24       	eor	r1, r1
      bc:	8f 93       	push	r24

	T1_ovc++;
      be:	80 91 8a 01 	lds	r24, 0x018A
      c2:	8f 5f       	subi	r24, 0xFF	; 255
      c4:	80 93 8a 01 	sts	0x018A, r24
}
      c8:	8f 91       	pop	r24
      ca:	0f 90       	pop	r0
      cc:	0f be       	out	0x3f, r0	; 63
      ce:	0f 90       	pop	r0
      d0:	1f 90       	pop	r1
      d2:	18 95       	reti

000000d4 <reset>:


void reset()
{

   reset_161();
      d4:	97 98       	cbi	0x12, 7	; 18
   reset_393();
      d6:	94 9a       	sbi	0x12, 4	; 18
   //RESET COUNTERS

   T1_ovc = 0;
      d8:	10 92 8a 01 	sts	0x018A, r1

   TCNT1H = 0;
      dc:	1d bc       	out	0x2d, r1	; 45
   barrier();

   TCNT1L = 0;
      de:	1c bc       	out	0x2c, r1	; 44
   TCNT1 = 0;
      e0:	1d bc       	out	0x2d, r1	; 45
      e2:	1c bc       	out	0x2c, r1	; 44
}
      e4:	08 95       	ret

000000e6 <start>:
void start()
{
  //sti_t1();
  enable_393();
      e6:	94 98       	cbi	0x12, 4	; 18
  enable_161();
      e8:	97 9a       	sbi	0x12, 7	; 18
  start_c();
      ea:	96 9a       	sbi	0x12, 6	; 18
}
      ec:	08 95       	ret

000000ee <stop>:
void stop()
{
   stop_c();
      ee:	96 98       	cbi	0x12, 6	; 18
}
      f0:	08 95       	ret

000000f2 <__vector_4>:


volatile char gate =0;
SIGNAL(SIG_OVERFLOW2) 
{
      f2:	1f 92       	push	r1
      f4:	0f 92       	push	r0
      f6:	0f b6       	in	r0, 0x3f	; 63
      f8:	0f 92       	push	r0
      fa:	11 24       	eor	r1, r1
      fc:	8f 93       	push	r24
  enable_161();
  start_c();
}
void stop()
{
   stop_c();
      fe:	96 98       	cbi	0x12, 6	; 18

volatile char gate =0;
SIGNAL(SIG_OVERFLOW2) 
{
 	stop();
	gate=1;
     100:	81 e0       	ldi	r24, 0x01	; 1
     102:	80 93 8c 01 	sts	0x018C, r24
}
     106:	8f 91       	pop	r24
     108:	0f 90       	pop	r0
     10a:	0f be       	out	0x3f, r0	; 63
     10c:	0f 90       	pop	r0
     10e:	1f 90       	pop	r1
     110:	18 95       	reti

00000112 <setup_timers>:



void setup_timers(){

	TCCR1A = 0x00; //Setup TC1 to count PD5/T1
     112:	1f bc       	out	0x2f, r1	; 47

	TCCR1B = 0x06; //TC1 down edge triger (from 393, so use down edge triger for correct count
     114:	86 e0       	ldi	r24, 0x06	; 6
     116:	8e bd       	out	0x2e, r24	; 46
	
	TCCR2 = 0x07;  //TC2 counts Clock_io/1024, use as time base caller 
     118:	87 e0       	ldi	r24, 0x07	; 7
     11a:	85 bd       	out	0x25, r24	; 37



}
     11c:	08 95       	ret

0000011e <setup_interrupts>:


void setup_interrupts()
{

	TIMSK =  _bits8(1,TOIE1,TOIE1)|_bits8(1,TOIE2,TOIE2);//enable timer 0,1,2 overflow intrrupt	
     11e:	84 e4       	ldi	r24, 0x44	; 68
     120:	89 bf       	out	0x39, r24	; 57

	//clear T1 counters
	T1_ovc = 0;
     122:	10 92 8a 01 	sts	0x018A, r1


	TCNT1H = 0;
     126:	1d bc       	out	0x2d, r1	; 45
	barrier();

	TCNT1L = 0;
     128:	1c bc       	out	0x2c, r1	; 44
	TCNT1 = 0;
     12a:	1d bc       	out	0x2d, r1	; 45
     12c:	1c bc       	out	0x2c, r1	; 44
	sti();
     12e:	78 94       	sei

}
     130:	08 95       	ret

00000132 <calc_freq>:




calc_freq()
{
     132:	ef 92       	push	r14
     134:	ff 92       	push	r15
     136:	0f 93       	push	r16
     138:	1f 93       	push	r17

    //timer 2 overflow: measure frequency

	frequency =  (unsigned long)read_03(); //4bit
     13a:	80 b3       	in	r24, 0x10	; 16
     13c:	90 e0       	ldi	r25, 0x00	; 0
     13e:	a0 e0       	ldi	r26, 0x00	; 0
     140:	b0 e0       	ldi	r27, 0x00	; 0
     142:	8f 70       	andi	r24, 0x0F	; 15
     144:	90 70       	andi	r25, 0x00	; 0
     146:	a0 70       	andi	r26, 0x00	; 0
     148:	b0 70       	andi	r27, 0x00	; 0
     14a:	80 93 96 01 	sts	0x0196, r24
     14e:	90 93 97 01 	sts	0x0197, r25
     152:	a0 93 98 01 	sts	0x0198, r26
     156:	b0 93 99 01 	sts	0x0199, r27
	frequency |= ((unsigned long)read_411())<<4; //8bit
     15a:	e0 90 96 01 	lds	r14, 0x0196
     15e:	f0 90 97 01 	lds	r15, 0x0197
     162:	00 91 98 01 	lds	r16, 0x0198
     166:	10 91 99 01 	lds	r17, 0x0199
     16a:	79 df       	rcall	.-270    	; 0x5e <read_411>
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	a0 e0       	ldi	r26, 0x00	; 0
     170:	b0 e0       	ldi	r27, 0x00	; 0
     172:	e4 e0       	ldi	r30, 0x04	; 4
     174:	88 0f       	add	r24, r24
     176:	99 1f       	adc	r25, r25
     178:	aa 1f       	adc	r26, r26
     17a:	bb 1f       	adc	r27, r27
     17c:	ea 95       	dec	r30
     17e:	d1 f7       	brne	.-12     	; 0x174 <calc_freq+0x42>
     180:	8e 29       	or	r24, r14
     182:	9f 29       	or	r25, r15
     184:	a0 2b       	or	r26, r16
     186:	b1 2b       	or	r27, r17
     188:	80 93 96 01 	sts	0x0196, r24
     18c:	90 93 97 01 	sts	0x0197, r25
     190:	a0 93 98 01 	sts	0x0198, r26
     194:	b0 93 99 01 	sts	0x0199, r27
	frequency |= (((unsigned long)TCNT1)<<12);  //16bit
     198:	20 91 96 01 	lds	r18, 0x0196
     19c:	30 91 97 01 	lds	r19, 0x0197
     1a0:	40 91 98 01 	lds	r20, 0x0198
     1a4:	50 91 99 01 	lds	r21, 0x0199
     1a8:	8c b5       	in	r24, 0x2c	; 44
     1aa:	9d b5       	in	r25, 0x2d	; 45
     1ac:	a0 e0       	ldi	r26, 0x00	; 0
     1ae:	b0 e0       	ldi	r27, 0x00	; 0
     1b0:	7c e0       	ldi	r23, 0x0C	; 12
     1b2:	88 0f       	add	r24, r24
     1b4:	99 1f       	adc	r25, r25
     1b6:	aa 1f       	adc	r26, r26
     1b8:	bb 1f       	adc	r27, r27
     1ba:	7a 95       	dec	r23
     1bc:	d1 f7       	brne	.-12     	; 0x1b2 <calc_freq+0x80>
     1be:	82 2b       	or	r24, r18
     1c0:	93 2b       	or	r25, r19
     1c2:	a4 2b       	or	r26, r20
     1c4:	b5 2b       	or	r27, r21
     1c6:	80 93 96 01 	sts	0x0196, r24
     1ca:	90 93 97 01 	sts	0x0197, r25
     1ce:	a0 93 98 01 	sts	0x0198, r26
     1d2:	b0 93 99 01 	sts	0x0199, r27
    frequency |= ((unsigned long)T1_ovc)<<28;
     1d6:	20 91 96 01 	lds	r18, 0x0196
     1da:	30 91 97 01 	lds	r19, 0x0197
     1de:	40 91 98 01 	lds	r20, 0x0198
     1e2:	50 91 99 01 	lds	r21, 0x0199
     1e6:	80 91 8a 01 	lds	r24, 0x018A
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	a0 e0       	ldi	r26, 0x00	; 0
     1ee:	b0 e0       	ldi	r27, 0x00	; 0
     1f0:	6c e1       	ldi	r22, 0x1C	; 28
     1f2:	88 0f       	add	r24, r24
     1f4:	99 1f       	adc	r25, r25
     1f6:	aa 1f       	adc	r26, r26
     1f8:	bb 1f       	adc	r27, r27
     1fa:	6a 95       	dec	r22
     1fc:	d1 f7       	brne	.-12     	; 0x1f2 <calc_freq+0xc0>
     1fe:	82 2b       	or	r24, r18
     200:	93 2b       	or	r25, r19
     202:	a4 2b       	or	r26, r20
     204:	b5 2b       	or	r27, r21
     206:	80 93 96 01 	sts	0x0196, r24
     20a:	90 93 97 01 	sts	0x0197, r25
     20e:	a0 93 98 01 	sts	0x0198, r26
     212:	b0 93 99 01 	sts	0x0199, r27

	
	//frequency =  (unsigned long)((float)frequency*factor*cal);


    reset();
     216:	5e df       	rcall	.-324    	; 0xd4 <reset>
	TCNT2= 0;
     218:	14 bc       	out	0x24, r1	; 36
	start();
     21a:	65 df       	rcall	.-310    	; 0xe6 <start>
	gate=0;
     21c:	10 92 8c 01 	sts	0x018C, r1
}
     220:	1f 91       	pop	r17
     222:	0f 91       	pop	r16
     224:	ff 90       	pop	r15
     226:	ef 90       	pop	r14
     228:	08 95       	ret

0000022a <post_display>:
	}
}
#endif

void post_display(long number)
{
     22a:	ef 92       	push	r14
     22c:	ff 92       	push	r15
     22e:	0f 93       	push	r16
     230:	1f 93       	push	r17
	static char xx=0;
  number = frequency;
     232:	e0 90 96 01 	lds	r14, 0x0196
     236:	f0 90 97 01 	lds	r15, 0x0197
     23a:	00 91 98 01 	lds	r16, 0x0198
     23e:	10 91 99 01 	lds	r17, 0x0199

	lcd_cursor(0,0);
     242:	80 e0       	ldi	r24, 0x00	; 0
     244:	90 e0       	ldi	r25, 0x00	; 0
     246:	60 e0       	ldi	r22, 0x00	; 0
     248:	70 e0       	ldi	r23, 0x00	; 0
     24a:	32 d2       	rcall	.+1124   	; 0x6b0 <lcd_cursor>
    //lcd_puts("              ");
	lcd_cursor(0,0);
     24c:	80 e0       	ldi	r24, 0x00	; 0
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	60 e0       	ldi	r22, 0x00	; 0
     252:	70 e0       	ldi	r23, 0x00	; 0
     254:	2d d2       	rcall	.+1114   	; 0x6b0 <lcd_cursor>
    
	if((number>999)&&(number<999999)){
     256:	d8 01       	movw	r26, r16
     258:	c7 01       	movw	r24, r14
     25a:	88 5e       	subi	r24, 0xE8	; 232
     25c:	93 40       	sbci	r25, 0x03	; 3
     25e:	a0 40       	sbci	r26, 0x00	; 0
     260:	b0 40       	sbci	r27, 0x00	; 0
     262:	87 55       	subi	r24, 0x57	; 87
     264:	9e 43       	sbci	r25, 0x3E	; 62
     266:	af 40       	sbci	r26, 0x0F	; 15
     268:	b0 40       	sbci	r27, 0x00	; 0
     26a:	58 f4       	brcc	.+22     	; 0x282 <post_display+0x58>
	   printLL(number,3,3);
     26c:	c8 01       	movw	r24, r16
     26e:	b7 01       	movw	r22, r14
     270:	43 e0       	ldi	r20, 0x03	; 3
     272:	23 e0       	ldi	r18, 0x03	; 3
     274:	c9 d2       	rcall	.+1426   	; 0x808 <printLL>
	   lcd_puts("KHz");
     276:	80 e6       	ldi	r24, 0x60	; 96
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	0d d2       	rcall	.+1050   	; 0x696 <lcd_puts>
     	lcd_puts("      ");
     27c:	84 e6       	ldi	r24, 0x64	; 100
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	0a d2       	rcall	.+1044   	; 0x696 <lcd_puts>

	}

    if(number>999999){
     282:	80 e4       	ldi	r24, 0x40	; 64
     284:	e8 16       	cp	r14, r24
     286:	82 e4       	ldi	r24, 0x42	; 66
     288:	f8 06       	cpc	r15, r24
     28a:	8f e0       	ldi	r24, 0x0F	; 15
     28c:	08 07       	cpc	r16, r24
     28e:	80 e0       	ldi	r24, 0x00	; 0
     290:	18 07       	cpc	r17, r24
     292:	5c f0       	brlt	.+22     	; 0x2aa <post_display+0x80>
	   printLL(number,6,6); //omit xxHz
     294:	c8 01       	movw	r24, r16
     296:	b7 01       	movw	r22, r14
     298:	46 e0       	ldi	r20, 0x06	; 6
     29a:	26 e0       	ldi	r18, 0x06	; 6
     29c:	b5 d2       	rcall	.+1386   	; 0x808 <printLL>
	   lcd_puts("MHz");
     29e:	8b e6       	ldi	r24, 0x6B	; 107
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	f9 d1       	rcall	.+1010   	; 0x696 <lcd_puts>
       lcd_puts("     ");
     2a4:	8f e6       	ldi	r24, 0x6F	; 111
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	f6 d1       	rcall	.+1004   	; 0x696 <lcd_puts>

   	
	}
	if(number<=999)
     2aa:	28 ee       	ldi	r18, 0xE8	; 232
     2ac:	e2 16       	cp	r14, r18
     2ae:	23 e0       	ldi	r18, 0x03	; 3
     2b0:	f2 06       	cpc	r15, r18
     2b2:	20 e0       	ldi	r18, 0x00	; 0
     2b4:	02 07       	cpc	r16, r18
     2b6:	20 e0       	ldi	r18, 0x00	; 0
     2b8:	12 07       	cpc	r17, r18
     2ba:	5c f4       	brge	.+22     	; 0x2d2 <post_display+0xa8>
	{
	
	   printLL(number,0,0);
     2bc:	c8 01       	movw	r24, r16
     2be:	b7 01       	movw	r22, r14
     2c0:	40 e0       	ldi	r20, 0x00	; 0
     2c2:	20 e0       	ldi	r18, 0x00	; 0
     2c4:	a1 d2       	rcall	.+1346   	; 0x808 <printLL>
	   lcd_puts("Hz");
     2c6:	85 e7       	ldi	r24, 0x75	; 117
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	e5 d1       	rcall	.+970    	; 0x696 <lcd_puts>
	   lcd_puts("        ");
     2cc:	88 e7       	ldi	r24, 0x78	; 120
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	e2 d1       	rcall	.+964    	; 0x696 <lcd_puts>
	}

	lcd_cursor(0,1);
     2d2:	80 e0       	ldi	r24, 0x00	; 0
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	61 e0       	ldi	r22, 0x01	; 1
     2d8:	70 e0       	ldi	r23, 0x00	; 0
     2da:	ea d1       	rcall	.+980    	; 0x6b0 <lcd_cursor>
		print10(i*1000);
		lcd_puts("mA");
	
	}
#endif
}
     2dc:	1f 91       	pop	r17
     2de:	0f 91       	pop	r16
     2e0:	ff 90       	pop	r15
     2e2:	ef 90       	pop	r14
     2e4:	08 95       	ret

000002e6 <counter_init>:

void counter_init()
{

  //PD6/PD7  output, 161/393 control
  _pins_mode(PORTD,PD6,PD7,OUTPUT);
     2e6:	82 e3       	ldi	r24, 0x32	; 50
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	61 e0       	ldi	r22, 0x01	; 1
     2ec:	46 e0       	ldi	r20, 0x06	; 6
     2ee:	27 e0       	ldi	r18, 0x07	; 7
     2f0:	8f d0       	rcall	.+286    	; 0x410 <__port_mode>
  _pins_mode(PORTD,PD4,PD4,OUTPUT);
     2f2:	82 e3       	ldi	r24, 0x32	; 50
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	61 e0       	ldi	r22, 0x01	; 1
     2f8:	44 e0       	ldi	r20, 0x04	; 4
     2fa:	24 e0       	ldi	r18, 0x04	; 4
     2fc:	89 d0       	rcall	.+274    	; 0x410 <__port_mode>
  
  //PD0-PD3 161 data in
  _pins_mode(PORTD, 0,PD3,INPUT);
     2fe:	82 e3       	ldi	r24, 0x32	; 50
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	60 e0       	ldi	r22, 0x00	; 0
     304:	40 e0       	ldi	r20, 0x00	; 0
     306:	23 e0       	ldi	r18, 0x03	; 3
     308:	83 d0       	rcall	.+262    	; 0x410 <__port_mode>
  _pins_pullup(PORTD,0,PD3,FLOAT);
     30a:	82 e3       	ldi	r24, 0x32	; 50
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	60 e0       	ldi	r22, 0x00	; 0
     310:	40 e0       	ldi	r20, 0x00	; 0
     312:	23 e0       	ldi	r18, 0x03	; 3
     314:	b3 d0       	rcall	.+358    	; 0x47c <__port_pullup>
  

  //PC0, 1,2
  // PORTC=0xFF;
  _pins_mode(HC165_PORT,PC0,PC1,OUTPUT);
     316:	85 e3       	ldi	r24, 0x35	; 53
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	61 e0       	ldi	r22, 0x01	; 1
     31c:	40 e0       	ldi	r20, 0x00	; 0
     31e:	21 e0       	ldi	r18, 0x01	; 1
     320:	77 d0       	rcall	.+238    	; 0x410 <__port_mode>
  _pins_mode(HC165_PORT,PC2,PC2,INPUT);
     322:	85 e3       	ldi	r24, 0x35	; 53
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	60 e0       	ldi	r22, 0x00	; 0
     328:	42 e0       	ldi	r20, 0x02	; 2
     32a:	22 e0       	ldi	r18, 0x02	; 2
     32c:	71 d0       	rcall	.+226    	; 0x410 <__port_mode>
  _pins_pullup(HC165_PORT,PC2,PC2,FLOAT);
     32e:	85 e3       	ldi	r24, 0x35	; 53
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	60 e0       	ldi	r22, 0x00	; 0
     334:	42 e0       	ldi	r20, 0x02	; 2
     336:	22 e0       	ldi	r18, 0x02	; 2
     338:	a1 d0       	rcall	.+322    	; 0x47c <__port_pullup>
  

  //T1 input init
  _pins_mode(PORTD, 0,PIND5,INPUT);
     33a:	82 e3       	ldi	r24, 0x32	; 50
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	60 e0       	ldi	r22, 0x00	; 0
     340:	40 e0       	ldi	r20, 0x00	; 0
     342:	25 e0       	ldi	r18, 0x05	; 5
     344:	65 d0       	rcall	.+202    	; 0x410 <__port_mode>
  _pins_pullup(PORTD,0,PIND5,FLOAT);
     346:	82 e3       	ldi	r24, 0x32	; 50
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	60 e0       	ldi	r22, 0x00	; 0
     34c:	40 e0       	ldi	r20, 0x00	; 0
     34e:	25 e0       	ldi	r18, 0x05	; 5
     350:	95 d0       	rcall	.+298    	; 0x47c <__port_pullup>
  //ADC init  
  //_pins_mode(PORTC, PINC0,PINC1,INPUT);
  //_pins_pullup(PORTC, PINC0,PINC1,FLOAT);
  //adc_init();

}
     352:	08 95       	ret

00000354 <freq_main>:


char loop=1;
unsigned long f=0;
void freq_main(void) 
{
     354:	1f 93       	push	r17

    
	cli();
     356:	f8 94       	cli



void setup_timers(){

	TCCR1A = 0x00; //Setup TC1 to count PD5/T1
     358:	1f bc       	out	0x2f, r1	; 47

	TCCR1B = 0x06; //TC1 down edge triger (from 393, so use down edge triger for correct count
     35a:	86 e0       	ldi	r24, 0x06	; 6
     35c:	8e bd       	out	0x2e, r24	; 46
	
	TCCR2 = 0x07;  //TC2 counts Clock_io/1024, use as time base caller 
     35e:	87 e0       	ldi	r24, 0x07	; 7
     360:	85 bd       	out	0x25, r24	; 37
    
	cli();

	setup_timers();

	setup_interrupts();
     362:	dd de       	rcall	.-582    	; 0x11e <setup_interrupts>
	counter_init();
     364:	c0 df       	rcall	.-128    	; 0x2e6 <counter_init>


    calc_freq();
     366:	e5 de       	rcall	.-566    	; 0x132 <calc_freq>

			if(loop==39){
				frequency = f*factor;
				post_display(frequency);
				f=0;
				loop=1;
     368:	11 e0       	ldi	r17, 0x01	; 1
    calc_freq();



 	while(1) {
		if(gate){
     36a:	80 91 8c 01 	lds	r24, 0x018C
     36e:	88 23       	and	r24, r24
     370:	e1 f3       	breq	.-8      	; 0x36a <freq_main+0x16>
		    loop++;
     372:	80 91 81 00 	lds	r24, 0x0081
     376:	8f 5f       	subi	r24, 0xFF	; 255
     378:	80 93 81 00 	sts	0x0081, r24
			calc_freq();
     37c:	da de       	rcall	.-588    	; 0x132 <calc_freq>
			f+=frequency;
     37e:	20 91 96 01 	lds	r18, 0x0196
     382:	30 91 97 01 	lds	r19, 0x0197
     386:	40 91 98 01 	lds	r20, 0x0198
     38a:	50 91 99 01 	lds	r21, 0x0199
     38e:	80 91 8d 01 	lds	r24, 0x018D
     392:	90 91 8e 01 	lds	r25, 0x018E
     396:	a0 91 8f 01 	lds	r26, 0x018F
     39a:	b0 91 90 01 	lds	r27, 0x0190
     39e:	28 0f       	add	r18, r24
     3a0:	39 1f       	adc	r19, r25
     3a2:	4a 1f       	adc	r20, r26
     3a4:	5b 1f       	adc	r21, r27
     3a6:	20 93 8d 01 	sts	0x018D, r18
     3aa:	30 93 8e 01 	sts	0x018E, r19
     3ae:	40 93 8f 01 	sts	0x018F, r20
     3b2:	50 93 90 01 	sts	0x0190, r21

			if(loop==39){
     3b6:	80 91 81 00 	lds	r24, 0x0081
     3ba:	87 32       	cpi	r24, 0x27	; 39
     3bc:	b1 f6       	brne	.-84     	; 0x36a <freq_main+0x16>
				frequency = f*factor;
     3be:	ca 01       	movw	r24, r20
     3c0:	b9 01       	movw	r22, r18
     3c2:	e6 d6       	rcall	.+3532   	; 0x1190 <__floatunsisf>
     3c4:	27 e7       	ldi	r18, 0x77	; 119
     3c6:	3e ec       	ldi	r19, 0xCE	; 206
     3c8:	40 e8       	ldi	r20, 0x80	; 128
     3ca:	5f e3       	ldi	r21, 0x3F	; 63
     3cc:	70 d5       	rcall	.+2784   	; 0xeae <__mulsf3>
     3ce:	ab d3       	rcall	.+1878   	; 0xb26 <__fixunssfsi>
     3d0:	60 93 96 01 	sts	0x0196, r22
     3d4:	70 93 97 01 	sts	0x0197, r23
     3d8:	80 93 98 01 	sts	0x0198, r24
     3dc:	90 93 99 01 	sts	0x0199, r25
				post_display(frequency);
     3e0:	60 91 96 01 	lds	r22, 0x0196
     3e4:	70 91 97 01 	lds	r23, 0x0197
     3e8:	80 91 98 01 	lds	r24, 0x0198
     3ec:	90 91 99 01 	lds	r25, 0x0199
     3f0:	1c df       	rcall	.-456    	; 0x22a <post_display>
				f=0;
     3f2:	10 92 8d 01 	sts	0x018D, r1
     3f6:	10 92 8e 01 	sts	0x018E, r1
     3fa:	10 92 8f 01 	sts	0x018F, r1
     3fe:	10 92 90 01 	sts	0x0190, r1
				loop=1;
     402:	10 93 81 00 	sts	0x0081, r17
     406:	b1 cf       	rjmp	.-158    	; 0x36a <freq_main+0x16>

00000408 <main>:
*/

int main()
{

  	cli();
     408:	f8 94       	cli
	lcd1602_init();
     40a:	5c d1       	rcall	.+696    	; 0x6c4 <lcd1602_init>
	

      
	while(1){
		freq_main();
     40c:	a3 df       	rcall	.-186    	; 0x354 <freq_main>
     40e:	fe cf       	rjmp	.-4      	; 0x40c <main+0x4>

00000410 <__port_mode>:
#include <atmel/avr-io.h>



void __port_mode(volatile unsigned char* port_addr, char mode, char n, char m)
{
     410:	54 2f       	mov	r21, r20
	if(INPUT == mode){
     412:	66 23       	and	r22, r22
     414:	c9 f4       	brne	.+50     	; 0x448 <__port_mode+0x38>
    	/* DDR */
		(*(volatile uint8_t *)(port_addr-1) ) &= ~(_MASK8(n,m));  /*enable input*/  
     416:	fc 01       	movw	r30, r24
     418:	42 91       	ld	r20, -Z
     41a:	87 e0       	ldi	r24, 0x07	; 7
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	82 1b       	sub	r24, r18
     420:	91 09       	sbc	r25, r1
     422:	2f ef       	ldi	r18, 0xFF	; 255
     424:	30 e0       	ldi	r19, 0x00	; 0
     426:	b9 01       	movw	r22, r18
     428:	02 c0       	rjmp	.+4      	; 0x42e <__port_mode+0x1e>
     42a:	75 95       	asr	r23
     42c:	67 95       	ror	r22
     42e:	8a 95       	dec	r24
     430:	e2 f7       	brpl	.-8      	; 0x42a <__port_mode+0x1a>
     432:	cb 01       	movw	r24, r22
     434:	02 c0       	rjmp	.+4      	; 0x43a <__port_mode+0x2a>
     436:	22 0f       	add	r18, r18
     438:	33 1f       	adc	r19, r19
     43a:	5a 95       	dec	r21
     43c:	e2 f7       	brpl	.-8      	; 0x436 <__port_mode+0x26>
     43e:	82 23       	and	r24, r18
     440:	80 95       	com	r24
     442:	84 23       	and	r24, r20
     444:	80 83       	st	Z, r24
     446:	08 95       	ret
    	/* PORT */  
		/*PULL UP enale lead to ADC always sample 1023...., close it here.*/
		//(*(volatile uint8_t *)port_addr) |= (_MASK8(n,m)) ; /*pull-up-enable*/  
	}else if(OUTPUT == mode){
     448:	61 30       	cpi	r22, 0x01	; 1
     44a:	b9 f4       	brne	.+46     	; 0x47a <__stack+0x1b>
		/* DDR */
		(*(volatile uint8_t *)(port_addr-1) ) |= _MASK8(n,m);  /*enable output*/  
     44c:	fc 01       	movw	r30, r24
     44e:	42 91       	ld	r20, -Z
     450:	87 e0       	ldi	r24, 0x07	; 7
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	82 1b       	sub	r24, r18
     456:	91 09       	sbc	r25, r1
     458:	2f ef       	ldi	r18, 0xFF	; 255
     45a:	30 e0       	ldi	r19, 0x00	; 0
     45c:	b9 01       	movw	r22, r18
     45e:	02 c0       	rjmp	.+4      	; 0x464 <__stack+0x5>
     460:	75 95       	asr	r23
     462:	67 95       	ror	r22
     464:	8a 95       	dec	r24
     466:	e2 f7       	brpl	.-8      	; 0x460 <__stack+0x1>
     468:	cb 01       	movw	r24, r22
     46a:	02 c0       	rjmp	.+4      	; 0x470 <__stack+0x11>
     46c:	22 0f       	add	r18, r18
     46e:	33 1f       	adc	r19, r19
     470:	5a 95       	dec	r21
     472:	e2 f7       	brpl	.-8      	; 0x46c <__stack+0xd>
     474:	82 23       	and	r24, r18
     476:	84 2b       	or	r24, r20
     478:	80 83       	st	Z, r24
     47a:	08 95       	ret

0000047c <__port_pullup>:
}


//pollup indicate the PIN mode is INPUT
void __port_pullup(volatile unsigned char* port_addr, char pullup, char n, char m)
{
     47c:	fc 01       	movw	r30, r24
     47e:	94 2f       	mov	r25, r20
     480:	42 2f       	mov	r20, r18
     482:	50 e0       	ldi	r21, 0x00	; 0
	if(PULLUP == pullup){
     484:	61 30       	cpi	r22, 0x01	; 1
     486:	a9 f4       	brne	.+42     	; 0x4b2 <__port_pullup+0x36>
       	/* PORT PULL UP */  
		(*(volatile uint8_t *)port_addr) |= (_MASK8(n,m)) ; /*pull-up-enable*/  
     488:	80 81       	ld	r24, Z
     48a:	27 e0       	ldi	r18, 0x07	; 7
     48c:	30 e0       	ldi	r19, 0x00	; 0
     48e:	24 1b       	sub	r18, r20
     490:	35 0b       	sbc	r19, r21
     492:	4f ef       	ldi	r20, 0xFF	; 255
     494:	50 e0       	ldi	r21, 0x00	; 0
     496:	ba 01       	movw	r22, r20
     498:	02 c0       	rjmp	.+4      	; 0x49e <__port_pullup+0x22>
     49a:	75 95       	asr	r23
     49c:	67 95       	ror	r22
     49e:	2a 95       	dec	r18
     4a0:	e2 f7       	brpl	.-8      	; 0x49a <__port_pullup+0x1e>
     4a2:	9b 01       	movw	r18, r22
     4a4:	02 c0       	rjmp	.+4      	; 0x4aa <__port_pullup+0x2e>
     4a6:	44 0f       	add	r20, r20
     4a8:	55 1f       	adc	r21, r21
     4aa:	9a 95       	dec	r25
     4ac:	e2 f7       	brpl	.-8      	; 0x4a6 <__port_pullup+0x2a>
     4ae:	24 23       	and	r18, r20
     4b0:	15 c0       	rjmp	.+42     	; 0x4dc <__port_pullup+0x60>
	}else{
       	/* cancel PULL UP */  
		(*(volatile uint8_t *)port_addr) |= ~(_MASK8(n,m)) ; /*pull-up-enable*/  
     4b2:	80 81       	ld	r24, Z
     4b4:	27 e0       	ldi	r18, 0x07	; 7
     4b6:	30 e0       	ldi	r19, 0x00	; 0
     4b8:	24 1b       	sub	r18, r20
     4ba:	35 0b       	sbc	r19, r21
     4bc:	4f ef       	ldi	r20, 0xFF	; 255
     4be:	50 e0       	ldi	r21, 0x00	; 0
     4c0:	ba 01       	movw	r22, r20
     4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <__port_pullup+0x4c>
     4c4:	75 95       	asr	r23
     4c6:	67 95       	ror	r22
     4c8:	2a 95       	dec	r18
     4ca:	e2 f7       	brpl	.-8      	; 0x4c4 <__port_pullup+0x48>
     4cc:	9b 01       	movw	r18, r22
     4ce:	02 c0       	rjmp	.+4      	; 0x4d4 <__port_pullup+0x58>
     4d0:	44 0f       	add	r20, r20
     4d2:	55 1f       	adc	r21, r21
     4d4:	9a 95       	dec	r25
     4d6:	e2 f7       	brpl	.-8      	; 0x4d0 <__port_pullup+0x54>
     4d8:	24 23       	and	r18, r20
     4da:	20 95       	com	r18
     4dc:	28 2b       	or	r18, r24
     4de:	20 83       	st	Z, r18
     4e0:	08 95       	ret

000004e2 <adc_init>:
void adc_init()
{
	short adc;

	/// AVCC, AREF 加滤波电容      ADCL keep low 8bit        init for ch0  
	ADMUX = _bits8(0b01,REFS0,REFS1) |   _bits8(0,ADLAR,ADLAR) |  _bits8(0,MUX0,MUX3); 
     4e2:	80 e4       	ldi	r24, 0x40	; 64
     4e4:	87 b9       	out	0x07, r24	; 7
        /*must READ ADCH for compled ADC*/

	/*ADC status and control*/   
	         /*enable ADC*/	  /*start first ADC*/    /*no interrupt for now*/ /*4M/32, 125kHz*/
	ADCSRA = _bits8(1,ADEN,ADEN) | _bits8(1,ADSC,ADSC) |  _bits8(0, ADIE,ADIE)   | _bits8(0b101, ADPS0,ADPS2);
     4e6:	85 ec       	ldi	r24, 0xC5	; 197
     4e8:	86 b9       	out	0x06, r24	; 6
       /*wait for 25 ADC clock for first ADC completed*/
	while(!_test_bit(ADCSRA,ADIF));
     4ea:	34 9b       	sbis	0x06, 4	; 6
     4ec:	fe cf       	rjmp	.-4      	; 0x4ea <adc_init+0x8>
	_set_bit(ADCSRA,ADIF); //clear IF bit
     4ee:	34 9a       	sbi	0x06, 4	; 6
  
    adc = ADCL;
     4f0:	84 b1       	in	r24, 0x04	; 4
	barrier();
	adc = ADCH;
     4f2:	85 b1       	in	r24, 0x05	; 5
}
     4f4:	08 95       	ret

000004f6 <_adc>:
unsigned int _adc(unsigned char ch)
{
  unsigned int adc_l=0,adc=0;

  /*select channel*/
  _mov_bits8(ADMUX,ch,MUX0,MUX3,0,2); /*ADC0...ADC4*/
     4f6:	97 b1       	in	r25, 0x07	; 7
     4f8:	87 70       	andi	r24, 0x07	; 7
     4fa:	90 7f       	andi	r25, 0xF0	; 240
     4fc:	89 2b       	or	r24, r25
     4fe:	87 b9       	out	0x07, r24	; 7

  /*start ADC*/
  _set_bit(ADCSRA,ADSC);
     500:	36 9a       	sbi	0x06, 6	; 6

  /*wait completed(ADIF active)*/
   while(!_test_bit(ADCSRA,ADIF));
     502:	34 9b       	sbis	0x06, 4	; 6
     504:	fe cf       	rjmp	.-4      	; 0x502 <_adc+0xc>

  /*read result */
  /*must READ ADCH for compled ADC*/
   adc_l = ADCL;
     506:	24 b1       	in	r18, 0x04	; 4
   /* GCC will swich ADCL read fist,so tell it don't do that*/
   barrier();
   adc =   ADCH ;
     508:	45 b1       	in	r20, 0x05	; 5
   adc = (adc<<8)|adc_l;
     50a:	94 2f       	mov	r25, r20
     50c:	80 e0       	ldi	r24, 0x00	; 0

   _set_bit(ADCSRA,ADIF); //clear IF bit
     50e:	34 9a       	sbi	0x06, 4	; 6
     510:	30 e0       	ldi	r19, 0x00	; 0
     512:	28 2b       	or	r18, r24
     514:	39 2b       	or	r19, r25
   return adc;
}
     516:	c9 01       	movw	r24, r18
     518:	08 95       	ret

0000051a <shiftout>:
}



void shiftout(unsigned char data)
{
     51a:	20 e0       	ldi	r18, 0x00	; 0
     51c:	30 e0       	ldi	r19, 0x00	; 0
     51e:	63 e0       	ldi	r22, 0x03	; 3
	char i=0;
	for(i=0;i<8;i++){
	   delay_io();
	  
	   if((data<<i)&0x80)
     520:	48 2f       	mov	r20, r24
     522:	50 e0       	ldi	r21, 0x00	; 0
     524:	86 2f       	mov	r24, r22
     526:	8a 95       	dec	r24
     528:	f1 f7       	brne	.-4      	; 0x526 <shiftout+0xc>
     52a:	ca 01       	movw	r24, r20
     52c:	02 2e       	mov	r0, r18
     52e:	02 c0       	rjmp	.+4      	; 0x534 <shiftout+0x1a>
     530:	88 0f       	add	r24, r24
     532:	99 1f       	adc	r25, r25
     534:	0a 94       	dec	r0
     536:	e2 f7       	brpl	.-8      	; 0x530 <shiftout+0x16>
     538:	87 ff       	sbrs	r24, 7
     53a:	02 c0       	rjmp	.+4      	; 0x540 <shiftout+0x26>
	     _set_bit(METAL_74HC595_PORT, METAL_74HC595_SDI);
     53c:	c3 9a       	sbi	0x18, 3	; 24
     53e:	01 c0       	rjmp	.+2      	; 0x542 <shiftout+0x28>
	   else
	     _clear_bit(METAL_74HC595_PORT, METAL_74HC595_SDI);
     540:	c3 98       	cbi	0x18, 3	; 24
     542:	86 2f       	mov	r24, r22
     544:	8a 95       	dec	r24
     546:	f1 f7       	brne	.-4      	; 0x544 <shiftout+0x2a>

	   delay_io();
	  _set_bit(METAL_74HC595_PORT,METAL_74HC595_CLK); 
     548:	c5 9a       	sbi	0x18, 5	; 24
     54a:	86 2f       	mov	r24, r22
     54c:	8a 95       	dec	r24
     54e:	f1 f7       	brne	.-4      	; 0x54c <shiftout+0x32>
       delay_io();
	  _clear_bit(METAL_74HC595_PORT, METAL_74HC595_CLK);
     550:	c5 98       	cbi	0x18, 5	; 24
     552:	2f 5f       	subi	r18, 0xFF	; 255
     554:	3f 4f       	sbci	r19, 0xFF	; 255


void shiftout(unsigned char data)
{
	char i=0;
	for(i=0;i<8;i++){
     556:	28 30       	cpi	r18, 0x08	; 8
     558:	31 05       	cpc	r19, r1
     55a:	21 f7       	brne	.-56     	; 0x524 <shiftout+0xa>
       delay_io();
	  _clear_bit(METAL_74HC595_PORT, METAL_74HC595_CLK);
	  		
   }

}
     55c:	08 95       	ret

0000055e <write_74hc595>:
void write_74hc595(unsigned char data)
{
     55e:	1f 93       	push	r17
     560:	13 e0       	ldi	r17, 0x03	; 3
     562:	91 2f       	mov	r25, r17
     564:	9a 95       	dec	r25
     566:	f1 f7       	brne	.-4      	; 0x564 <write_74hc595+0x6>
	//_clear_bit(METAL_74HC595_PORT,CLK); //prepare send data
	delay_io();
      
	shiftout(data);
     568:	d8 df       	rcall	.-80     	; 0x51a <shiftout>
     56a:	81 2f       	mov	r24, r17
     56c:	8a 95       	dec	r24
     56e:	f1 f7       	brne	.-4      	; 0x56c <write_74hc595+0xe>
    
	delay_io();
    _set_bit(METAL_74HC595_PORT,METAL_74HC595_LATCH); //prepare open latch
     570:	c4 9a       	sbi	0x18, 4	; 24
     572:	81 2f       	mov	r24, r17
     574:	8a 95       	dec	r24
     576:	f1 f7       	brne	.-4      	; 0x574 <write_74hc595+0x16>
     delay_io();
	 delay_io();
     delay_io();
    _clear_bit(METAL_74HC595_PORT,METAL_74HC595_LATCH); //prepare open latch
     578:	81 2f       	mov	r24, r17
     57a:	8a 95       	dec	r24
     57c:	f1 f7       	brne	.-4      	; 0x57a <write_74hc595+0x1c>
     57e:	1a 95       	dec	r17
     580:	f1 f7       	brne	.-4      	; 0x57e <write_74hc595+0x20>
     582:	c4 98       	cbi	0x18, 4	; 24
   
}
     584:	1f 91       	pop	r17
     586:	08 95       	ret

00000588 <init_74hc595>:


void init_74hc595(void)

{
	_pins_mode(METAL_74HC595_PORT, (char)METAL_74HC595_SDI,(char)METAL_74HC595_CLK,(char)OUTPUT);
     588:	88 e3       	ldi	r24, 0x38	; 56
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	61 e0       	ldi	r22, 0x01	; 1
     58e:	43 e0       	ldi	r20, 0x03	; 3
     590:	25 e0       	ldi	r18, 0x05	; 5
     592:	3e df       	rcall	.-388    	; 0x410 <__port_mode>
}
     594:	08 95       	ret

00000596 <io_delay>:
     596:	82 e3       	ldi	r24, 0x32	; 50
     598:	8a 95       	dec	r24
     59a:	f1 f7       	brne	.-4      	; 0x598 <io_delay+0x2>
 for safe and reserve space, use function and 12us	
*/
void io_delay()
{
   _delay_us(15);
}
     59c:	08 95       	ret

0000059e <io_50ms>:
void io_50ms()
{
     59e:	84 ef       	ldi	r24, 0xF4	; 244
     5a0:	91 e0       	ldi	r25, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     5a2:	2a ef       	ldi	r18, 0xFA	; 250
     5a4:	30 e0       	ldi	r19, 0x00	; 0
     5a6:	f9 01       	movw	r30, r18
     5a8:	31 97       	sbiw	r30, 0x01	; 1
     5aa:	f1 f7       	brne	.-4      	; 0x5a8 <io_50ms+0xa>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5ac:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5ae:	d9 f7       	brne	.-10     	; 0x5a6 <io_50ms+0x8>
   _delay_ms(50);
}
     5b0:	08 95       	ret

000005b2 <hd44870_send>:

static void hd44870_send(unsigned char c, char is_cmd) 
{
     5b2:	0f 93       	push	r16
     5b4:	1f 93       	push	r17
     5b6:	08 2f       	mov	r16, r24
     5b8:	16 2f       	mov	r17, r22
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     5ba:	82 e3       	ldi	r24, 0x32	; 50
     5bc:	8a 95       	dec	r24
     5be:	f1 f7       	brne	.-4      	; 0x5bc <hd44870_send+0xa>
  io_delay();
  
  bus4w &=~(_EN|_RW);       
     5c0:	80 91 91 01 	lds	r24, 0x0191
     5c4:	8f 7c       	andi	r24, 0xCF	; 207
     5c6:	80 93 91 01 	sts	0x0191, r24
  _rswe();
     5ca:	c9 df       	rcall	.-110    	; 0x55e <write_74hc595>
     5cc:	80 91 91 01 	lds	r24, 0x0191
  //io_delay();
  
  if(is_cmd)
     5d0:	11 23       	and	r17, r17
     5d2:	11 f0       	breq	.+4      	; 0x5d8 <hd44870_send+0x26>
  	 bus4w&=~_RS;  //RS=0，command
     5d4:	8f 7b       	andi	r24, 0xBF	; 191
     5d6:	01 c0       	rjmp	.+2      	; 0x5da <hd44870_send+0x28>
  else
  	 bus4w|=_RS;  //RS=1, data
     5d8:	80 64       	ori	r24, 0x40	; 64
     5da:	80 93 91 01 	sts	0x0191, r24
  _rswe();
     5de:	80 91 91 01 	lds	r24, 0x0191
     5e2:	bd df       	rcall	.-134    	; 0x55e <write_74hc595>
     5e4:	12 e3       	ldi	r17, 0x32	; 50
     5e6:	81 2f       	mov	r24, r17
     5e8:	8a 95       	dec	r24
     5ea:	f1 f7       	brne	.-4      	; 0x5e8 <hd44870_send+0x36>
  io_delay();
  
  /* 4 MSB*/
  bus4w &= ~(_DATA);    
  bus4w |= (c>>4)&_DATA; 
     5ec:	80 2f       	mov	r24, r16
     5ee:	82 95       	swap	r24
     5f0:	8f 70       	andi	r24, 0x0F	; 15
     5f2:	90 91 91 01 	lds	r25, 0x0191
     5f6:	90 7f       	andi	r25, 0xF0	; 240
     5f8:	89 2b       	or	r24, r25
     5fa:	80 93 91 01 	sts	0x0191, r24
  _data();
     5fe:	af df       	rcall	.-162    	; 0x55e <write_74hc595>
     600:	81 2f       	mov	r24, r17
     602:	8a 95       	dec	r24
     604:	f1 f7       	brne	.-4      	; 0x602 <hd44870_send+0x50>
  
  io_delay();
  bus4w |=_EN;  
     606:	80 91 91 01 	lds	r24, 0x0191
     60a:	80 61       	ori	r24, 0x10	; 16
     60c:	80 93 91 01 	sts	0x0191, r24
  _rswe();
     610:	a6 df       	rcall	.-180    	; 0x55e <write_74hc595>
     612:	81 2f       	mov	r24, r17
     614:	8a 95       	dec	r24
     616:	f1 f7       	brne	.-4      	; 0x614 <hd44870_send+0x62>
  io_delay(); 
  bus4w &=~_EN;   
     618:	80 91 91 01 	lds	r24, 0x0191
     61c:	8f 7e       	andi	r24, 0xEF	; 239
     61e:	80 93 91 01 	sts	0x0191, r24
  _rswe();
     622:	9d df       	rcall	.-198    	; 0x55e <write_74hc595>
     624:	81 2f       	mov	r24, r17
     626:	8a 95       	dec	r24
     628:	f1 f7       	brne	.-4      	; 0x626 <hd44870_send+0x74>

  io_delay();
  
  /*send low 4 lsb*/
  bus4w&=~_DATA;         
  bus4w|=(c)&_DATA; 
     62a:	80 2f       	mov	r24, r16
     62c:	8f 70       	andi	r24, 0x0F	; 15
     62e:	90 91 91 01 	lds	r25, 0x0191
     632:	90 7f       	andi	r25, 0xF0	; 240
     634:	89 2b       	or	r24, r25
     636:	80 93 91 01 	sts	0x0191, r24
  _data();
     63a:	91 df       	rcall	.-222    	; 0x55e <write_74hc595>
     63c:	81 2f       	mov	r24, r17
     63e:	8a 95       	dec	r24
     640:	f1 f7       	brne	.-4      	; 0x63e <hd44870_send+0x8c>
  io_delay();

  bus4w |=_EN;  
     642:	80 91 91 01 	lds	r24, 0x0191
     646:	80 61       	ori	r24, 0x10	; 16
     648:	80 93 91 01 	sts	0x0191, r24
  _rswe();
     64c:	88 df       	rcall	.-240    	; 0x55e <write_74hc595>
     64e:	1a 95       	dec	r17
     650:	f1 f7       	brne	.-4      	; 0x64e <hd44870_send+0x9c>
  io_delay(); 
  bus4w &=~_EN;   
     652:	80 91 91 01 	lds	r24, 0x0191
     656:	8f 7e       	andi	r24, 0xEF	; 239
     658:	80 93 91 01 	sts	0x0191, r24
  _rswe();
     65c:	80 df       	rcall	.-256    	; 0x55e <write_74hc595>
  
  
}
     65e:	1f 91       	pop	r17
     660:	0f 91       	pop	r16
     662:	08 95       	ret

00000664 <lcd_putc>:
   
}

void lcd_putc(char c) //列x=0~15,行y=0,1
{
  send_data( c);
     664:	60 e0       	ldi	r22, 0x00	; 0
     666:	a5 df       	rcall	.-182    	; 0x5b2 <hd44870_send>
}
     668:	08 95       	ret

0000066a <lcd_clear>:




void lcd_clear()
{
     66a:	84 ef       	ldi	r24, 0xF4	; 244
     66c:	91 e0       	ldi	r25, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     66e:	2a ef       	ldi	r18, 0xFA	; 250
     670:	30 e0       	ldi	r19, 0x00	; 0
     672:	f9 01       	movw	r30, r18
     674:	31 97       	sbiw	r30, 0x01	; 1
     676:	f1 f7       	brne	.-4      	; 0x674 <lcd_clear+0xa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     678:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     67a:	d9 f7       	brne	.-10     	; 0x672 <lcd_clear+0x8>
   io_50ms();
   send_cmd(0x01);  /*清屏*/
     67c:	81 e0       	ldi	r24, 0x01	; 1
     67e:	61 e0       	ldi	r22, 0x01	; 1
     680:	98 df       	rcall	.-208    	; 0x5b2 <hd44870_send>
     682:	84 ef       	ldi	r24, 0xF4	; 244
     684:	91 e0       	ldi	r25, 0x01	; 1
     686:	2a ef       	ldi	r18, 0xFA	; 250
     688:	30 e0       	ldi	r19, 0x00	; 0
     68a:	f9 01       	movw	r30, r18
     68c:	31 97       	sbiw	r30, 0x01	; 1
     68e:	f1 f7       	brne	.-4      	; 0x68c <lcd_clear+0x22>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     690:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     692:	d9 f7       	brne	.-10     	; 0x68a <lcd_clear+0x20>
   io_50ms();
   
}
     694:	08 95       	ret

00000696 <lcd_puts>:
{
	send_cmd(x+(y?0xc0:0x80));  
}

void lcd_puts(char *s) 
{
     696:	cf 93       	push	r28
     698:	df 93       	push	r29
     69a:	ec 01       	movw	r28, r24
     69c:	03 c0       	rjmp	.+6      	; 0x6a4 <lcd_puts+0xe>
    while (*s) 
    {
      send_data( *s );
     69e:	60 e0       	ldi	r22, 0x00	; 0
     6a0:	88 df       	rcall	.-240    	; 0x5b2 <hd44870_send>
      s ++;
     6a2:	21 96       	adiw	r28, 0x01	; 1
	send_cmd(x+(y?0xc0:0x80));  
}

void lcd_puts(char *s) 
{
    while (*s) 
     6a4:	88 81       	ld	r24, Y
     6a6:	88 23       	and	r24, r24
     6a8:	d1 f7       	brne	.-12     	; 0x69e <lcd_puts+0x8>
    {
      send_data( *s );
      s ++;
    }
     
}
     6aa:	df 91       	pop	r29
     6ac:	cf 91       	pop	r28
     6ae:	08 95       	ret

000006b0 <lcd_cursor>:
  io_50ms();io_50ms();
}


void lcd_cursor(char x, char y)
{
     6b0:	98 2f       	mov	r25, r24
	send_cmd(x+(y?0xc0:0x80));  
     6b2:	66 23       	and	r22, r22
     6b4:	11 f4       	brne	.+4      	; 0x6ba <lcd_cursor+0xa>
     6b6:	80 e8       	ldi	r24, 0x80	; 128
     6b8:	01 c0       	rjmp	.+2      	; 0x6bc <lcd_cursor+0xc>
     6ba:	80 ec       	ldi	r24, 0xC0	; 192
     6bc:	89 0f       	add	r24, r25
     6be:	61 e0       	ldi	r22, 0x01	; 1
     6c0:	78 df       	rcall	.-272    	; 0x5b2 <hd44870_send>
}
     6c2:	08 95       	ret

000006c4 <lcd1602_init>:
#define send_cmd(data) hd44870_send(data,1)
#define send_data(data) hd44870_send(data,0)

void lcd1602_init(void)    
{
  io_init();
     6c4:	61 df       	rcall	.-318    	; 0x588 <init_74hc595>

  send_cmd(0x33);
     6c6:	83 e3       	ldi	r24, 0x33	; 51
     6c8:	61 e0       	ldi	r22, 0x01	; 1
     6ca:	73 df       	rcall	.-282    	; 0x5b2 <hd44870_send>
     6cc:	84 ef       	ldi	r24, 0xF4	; 244
     6ce:	91 e0       	ldi	r25, 0x01	; 1
     6d0:	2a ef       	ldi	r18, 0xFA	; 250
     6d2:	30 e0       	ldi	r19, 0x00	; 0
     6d4:	f9 01       	movw	r30, r18
     6d6:	31 97       	sbiw	r30, 0x01	; 1
     6d8:	f1 f7       	brne	.-4      	; 0x6d6 <lcd1602_init+0x12>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6da:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6dc:	d9 f7       	brne	.-10     	; 0x6d4 <lcd1602_init+0x10>
  io_50ms();
  send_cmd(0x32);
     6de:	82 e3       	ldi	r24, 0x32	; 50
     6e0:	61 e0       	ldi	r22, 0x01	; 1
     6e2:	67 df       	rcall	.-306    	; 0x5b2 <hd44870_send>
     6e4:	84 ef       	ldi	r24, 0xF4	; 244
     6e6:	91 e0       	ldi	r25, 0x01	; 1
     6e8:	2a ef       	ldi	r18, 0xFA	; 250
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	f9 01       	movw	r30, r18
     6ee:	31 97       	sbiw	r30, 0x01	; 1
     6f0:	f1 f7       	brne	.-4      	; 0x6ee <lcd1602_init+0x2a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6f2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6f4:	d9 f7       	brne	.-10     	; 0x6ec <lcd1602_init+0x28>
  io_50ms();

  send_cmd(0x28); /* ４位数据线，５＊１０字体 */
     6f6:	88 e2       	ldi	r24, 0x28	; 40
     6f8:	61 e0       	ldi	r22, 0x01	; 1
     6fa:	5b df       	rcall	.-330    	; 0x5b2 <hd44870_send>
     6fc:	84 ef       	ldi	r24, 0xF4	; 244
     6fe:	91 e0       	ldi	r25, 0x01	; 1
     700:	2a ef       	ldi	r18, 0xFA	; 250
     702:	30 e0       	ldi	r19, 0x00	; 0
     704:	f9 01       	movw	r30, r18
     706:	31 97       	sbiw	r30, 0x01	; 1
     708:	f1 f7       	brne	.-4      	; 0x706 <lcd1602_init+0x42>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     70a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     70c:	d9 f7       	brne	.-10     	; 0x704 <lcd1602_init+0x40>
  io_50ms();
  
  send_cmd(0x0c); /*开显示，无光标， 0xf：开光标并闪烁*/   
     70e:	8c e0       	ldi	r24, 0x0C	; 12
     710:	61 e0       	ldi	r22, 0x01	; 1
     712:	4f df       	rcall	.-354    	; 0x5b2 <hd44870_send>
     714:	84 ef       	ldi	r24, 0xF4	; 244
     716:	91 e0       	ldi	r25, 0x01	; 1
     718:	2a ef       	ldi	r18, 0xFA	; 250
     71a:	30 e0       	ldi	r19, 0x00	; 0
     71c:	f9 01       	movw	r30, r18
     71e:	31 97       	sbiw	r30, 0x01	; 1
     720:	f1 f7       	brne	.-4      	; 0x71e <lcd1602_init+0x5a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     722:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     724:	d9 f7       	brne	.-10     	; 0x71c <lcd1602_init+0x58>
  io_50ms();

  send_cmd(0x06);  /* 光标自动右移，整屏不移动 */
     726:	86 e0       	ldi	r24, 0x06	; 6
     728:	61 e0       	ldi	r22, 0x01	; 1
     72a:	43 df       	rcall	.-378    	; 0x5b2 <hd44870_send>
     72c:	84 ef       	ldi	r24, 0xF4	; 244
     72e:	91 e0       	ldi	r25, 0x01	; 1
     730:	2a ef       	ldi	r18, 0xFA	; 250
     732:	30 e0       	ldi	r19, 0x00	; 0
     734:	f9 01       	movw	r30, r18
     736:	31 97       	sbiw	r30, 0x01	; 1
     738:	f1 f7       	brne	.-4      	; 0x736 <lcd1602_init+0x72>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     73a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     73c:	d9 f7       	brne	.-10     	; 0x734 <lcd1602_init+0x70>
  io_50ms();
  

  send_cmd(0x01);  /*清屏*/
     73e:	81 e0       	ldi	r24, 0x01	; 1
     740:	61 e0       	ldi	r22, 0x01	; 1
     742:	37 df       	rcall	.-402    	; 0x5b2 <hd44870_send>
     744:	84 ef       	ldi	r24, 0xF4	; 244
     746:	91 e0       	ldi	r25, 0x01	; 1
     748:	2a ef       	ldi	r18, 0xFA	; 250
     74a:	30 e0       	ldi	r19, 0x00	; 0
     74c:	f9 01       	movw	r30, r18
     74e:	31 97       	sbiw	r30, 0x01	; 1
     750:	f1 f7       	brne	.-4      	; 0x74e <lcd1602_init+0x8a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     752:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     754:	d9 f7       	brne	.-10     	; 0x74c <lcd1602_init+0x88>
     756:	84 ef       	ldi	r24, 0xF4	; 244
     758:	91 e0       	ldi	r25, 0x01	; 1
     75a:	2a ef       	ldi	r18, 0xFA	; 250
     75c:	30 e0       	ldi	r19, 0x00	; 0
     75e:	f9 01       	movw	r30, r18
     760:	31 97       	sbiw	r30, 0x01	; 1
     762:	f1 f7       	brne	.-4      	; 0x760 <lcd1602_init+0x9c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     764:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     766:	d9 f7       	brne	.-10     	; 0x75e <lcd1602_init+0x9a>
  io_50ms();io_50ms();
}
     768:	08 95       	ret

0000076a <delay>:
volatile unsigned  long jiffers=0;  //250us per jiffers


/*0-64 seconds*/
void delay(unsigned long ticks)
{
     76a:	ef 92       	push	r14
     76c:	ff 92       	push	r15
     76e:	0f 93       	push	r16
     770:	1f 93       	push	r17
     772:	9b 01       	movw	r18, r22
     774:	ac 01       	movw	r20, r24
  
   unsigned long lt = jiffers;
     776:	80 91 92 01 	lds	r24, 0x0192
     77a:	90 91 93 01 	lds	r25, 0x0193
     77e:	a0 91 94 01 	lds	r26, 0x0194
     782:	b0 91 95 01 	lds	r27, 0x0195

   while(!timeafter(jiffers,(lt+ ticks)));
     786:	28 0f       	add	r18, r24
     788:	39 1f       	adc	r19, r25
     78a:	4a 1f       	adc	r20, r26
     78c:	5b 1f       	adc	r21, r27
     78e:	80 91 92 01 	lds	r24, 0x0192
     792:	90 91 93 01 	lds	r25, 0x0193
     796:	a0 91 94 01 	lds	r26, 0x0194
     79a:	b0 91 95 01 	lds	r27, 0x0195
     79e:	79 01       	movw	r14, r18
     7a0:	8a 01       	movw	r16, r20
     7a2:	e8 1a       	sub	r14, r24
     7a4:	f9 0a       	sbc	r15, r25
     7a6:	0a 0b       	sbc	r16, r26
     7a8:	1b 0b       	sbc	r17, r27
     7aa:	17 ff       	sbrs	r17, 7
     7ac:	f0 cf       	rjmp	.-32     	; 0x78e <delay+0x24>
   
   return;

}
     7ae:	1f 91       	pop	r17
     7b0:	0f 91       	pop	r16
     7b2:	ff 90       	pop	r15
     7b4:	ef 90       	pop	r14
     7b6:	08 95       	ret

000007b8 <_swap8>:

/*abcd1234 => 4321dcba */
unsigned char _swap8(unsigned char x)
{
    /*abcd1234 => 1234abcd*/
	x= (x>>4) | (x<<4);
     7b8:	28 2f       	mov	r18, r24
     7ba:	22 95       	swap	r18
     7bc:	2f 70       	andi	r18, 0x0F	; 15
     7be:	82 95       	swap	r24
     7c0:	80 7f       	andi	r24, 0xF0	; 240
     7c2:	28 2b       	or	r18, r24
	/*1234abcd  => 3412cdab*/
    	   /*1200ab00*/         /*003400cd*/
	x= ((x&0xCC)>>2) | ((x&0x33)<<2);
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	c9 01       	movw	r24, r18
     7c8:	83 73       	andi	r24, 0x33	; 51
     7ca:	90 70       	andi	r25, 0x00	; 0
     7cc:	88 0f       	add	r24, r24
     7ce:	99 1f       	adc	r25, r25
     7d0:	88 0f       	add	r24, r24
     7d2:	99 1f       	adc	r25, r25
     7d4:	2c 7c       	andi	r18, 0xCC	; 204
     7d6:	30 70       	andi	r19, 0x00	; 0
     7d8:	35 95       	asr	r19
     7da:	27 95       	ror	r18
     7dc:	35 95       	asr	r19
     7de:	27 95       	ror	r18
     7e0:	82 2b       	or	r24, r18
                 /*0xcc*/            /*0x33*/
	/*3412cdab => 4321dcba*/
	/*b10101010*/               /*b01010101*/
	x= ((x&0xAA)>>1) | ((x&0x55)<<1);
     7e2:	28 2f       	mov	r18, r24
     7e4:	30 e0       	ldi	r19, 0x00	; 0
     7e6:	c9 01       	movw	r24, r18
     7e8:	85 75       	andi	r24, 0x55	; 85
     7ea:	90 70       	andi	r25, 0x00	; 0
     7ec:	88 0f       	add	r24, r24
     7ee:	99 1f       	adc	r25, r25
     7f0:	2a 7a       	andi	r18, 0xAA	; 170
     7f2:	30 70       	andi	r19, 0x00	; 0
     7f4:	35 95       	asr	r19
     7f6:	27 95       	ror	r18
            /*0xAA*/            /*0x55*/
    return x;
}
     7f8:	82 2b       	or	r24, r18
     7fa:	08 95       	ret

000007fc <hex2c>:


char hex2c(char hex)
{

   if(hex<0xa)
     7fc:	8a 30       	cpi	r24, 0x0A	; 10
     7fe:	10 f4       	brcc	.+4      	; 0x804 <hex2c+0x8>
      return '0'+hex;
     800:	80 5d       	subi	r24, 0xD0	; 208
     802:	08 95       	ret
   else
      return 'a'+hex-0xa;		   
     804:	89 5a       	subi	r24, 0xA9	; 169
}
     806:	08 95       	ret

00000808 <printLL>:
	 lcd_putc( hex2c(n/10));
	 lcd_putc( hex2c(n%10));
}

void printLL(unsigned long n, char dot, char prec)
{
     808:	af 92       	push	r10
     80a:	bf 92       	push	r11
     80c:	cf 92       	push	r12
     80e:	df 92       	push	r13
     810:	ef 92       	push	r14
     812:	ff 92       	push	r15
     814:	0f 93       	push	r16
     816:	1f 93       	push	r17
     818:	7b 01       	movw	r14, r22
     81a:	8c 01       	movw	r16, r24
     81c:	d4 2e       	mov	r13, r20
     81e:	a2 2e       	mov	r10, r18
     //irqoff();
	 char frac=0,sf=0;

	 lcd_putc(hex2c(n/10000000));
     820:	20 e8       	ldi	r18, 0x80	; 128
     822:	36 e9       	ldi	r19, 0x96	; 150
     824:	48 e9       	ldi	r20, 0x98	; 152
     826:	50 e0       	ldi	r21, 0x00	; 0
     828:	31 d7       	rcall	.+3682   	; 0x168c <__udivmodsi4>


char hex2c(char hex)
{

   if(hex<0xa)
     82a:	2a 30       	cpi	r18, 0x0A	; 10
     82c:	18 f4       	brcc	.+6      	; 0x834 <printLL+0x2c>
      return '0'+hex;
     82e:	82 2f       	mov	r24, r18
     830:	80 5d       	subi	r24, 0xD0	; 208
     832:	02 c0       	rjmp	.+4      	; 0x838 <printLL+0x30>
   else
      return 'a'+hex-0xa;		   
     834:	82 2f       	mov	r24, r18
     836:	89 5a       	subi	r24, 0xA9	; 169
void printLL(unsigned long n, char dot, char prec)
{
     //irqoff();
	 char frac=0,sf=0;

	 lcd_putc(hex2c(n/10000000));
     838:	15 df       	rcall	.-470    	; 0x664 <lcd_putc>
	 n = n%10000000;
     83a:	c8 01       	movw	r24, r16
     83c:	b7 01       	movw	r22, r14
     83e:	20 e8       	ldi	r18, 0x80	; 128
     840:	36 e9       	ldi	r19, 0x96	; 150
     842:	48 e9       	ldi	r20, 0x98	; 152
     844:	50 e0       	ldi	r21, 0x00	; 0
     846:	22 d7       	rcall	.+3652   	; 0x168c <__udivmodsi4>
     848:	f6 2e       	mov	r15, r22
     84a:	e7 2e       	mov	r14, r23
     84c:	c8 2e       	mov	r12, r24
     84e:	b9 2e       	mov	r11, r25
	 if(7==dot){
     850:	87 e0       	ldi	r24, 0x07	; 7
     852:	d8 16       	cp	r13, r24
     854:	11 f0       	breq	.+4      	; 0x85a <printLL+0x52>
     856:	00 e0       	ldi	r16, 0x00	; 0
     858:	03 c0       	rjmp	.+6      	; 0x860 <printLL+0x58>
	 	lcd_putc('.');
     85a:	8e e2       	ldi	r24, 0x2E	; 46
     85c:	03 df       	rcall	.-506    	; 0x664 <lcd_putc>
     85e:	01 e0       	ldi	r16, 0x01	; 1
		sf=1;
	 }
		     
     lcd_putc(hex2c(n/1000000));//M
     860:	6f 2d       	mov	r22, r15
     862:	7e 2d       	mov	r23, r14
     864:	8c 2d       	mov	r24, r12
     866:	9b 2d       	mov	r25, r11
     868:	20 e4       	ldi	r18, 0x40	; 64
     86a:	32 e4       	ldi	r19, 0x42	; 66
     86c:	4f e0       	ldi	r20, 0x0F	; 15
     86e:	50 e0       	ldi	r21, 0x00	; 0
     870:	0d d7       	rcall	.+3610   	; 0x168c <__udivmodsi4>


char hex2c(char hex)
{

   if(hex<0xa)
     872:	2a 30       	cpi	r18, 0x0A	; 10
     874:	18 f4       	brcc	.+6      	; 0x87c <printLL+0x74>
      return '0'+hex;
     876:	82 2f       	mov	r24, r18
     878:	80 5d       	subi	r24, 0xD0	; 208
     87a:	02 c0       	rjmp	.+4      	; 0x880 <printLL+0x78>
   else
      return 'a'+hex-0xa;		   
     87c:	82 2f       	mov	r24, r18
     87e:	89 5a       	subi	r24, 0xA9	; 169
	 if(7==dot){
	 	lcd_putc('.');
		sf=1;
	 }
		     
     lcd_putc(hex2c(n/1000000));//M
     880:	f1 de       	rcall	.-542    	; 0x664 <lcd_putc>
	 if(sf){frac++; if(frac>=prec)return;}
     882:	00 23       	and	r16, r16
     884:	11 f4       	brne	.+4      	; 0x88a <printLL+0x82>
     886:	10 e0       	ldi	r17, 0x00	; 0
     888:	05 c0       	rjmp	.+10     	; 0x894 <printLL+0x8c>
     88a:	81 e0       	ldi	r24, 0x01	; 1
     88c:	8a 15       	cp	r24, r10
     88e:	08 f0       	brcs	.+2      	; 0x892 <printLL+0x8a>
     890:	e8 c0       	rjmp	.+464    	; 0xa62 <printLL+0x25a>
     892:	11 e0       	ldi	r17, 0x01	; 1
	 
	 n = n%1000000;
     894:	6f 2d       	mov	r22, r15
     896:	7e 2d       	mov	r23, r14
     898:	8c 2d       	mov	r24, r12
     89a:	9b 2d       	mov	r25, r11
     89c:	20 e4       	ldi	r18, 0x40	; 64
     89e:	32 e4       	ldi	r19, 0x42	; 66
     8a0:	4f e0       	ldi	r20, 0x0F	; 15
     8a2:	50 e0       	ldi	r21, 0x00	; 0
     8a4:	f3 d6       	rcall	.+3558   	; 0x168c <__udivmodsi4>
     8a6:	f6 2e       	mov	r15, r22
     8a8:	e7 2e       	mov	r14, r23
     8aa:	c8 2e       	mov	r12, r24
     8ac:	b9 2e       	mov	r11, r25
	 if(6==dot){
     8ae:	86 e0       	ldi	r24, 0x06	; 6
     8b0:	d8 16       	cp	r13, r24
     8b2:	19 f4       	brne	.+6      	; 0x8ba <printLL+0xb2>
	 	lcd_putc('.');
     8b4:	8e e2       	ldi	r24, 0x2E	; 46
     8b6:	d6 de       	rcall	.-596    	; 0x664 <lcd_putc>
     8b8:	01 e0       	ldi	r16, 0x01	; 1
		sf=1;
	 }
	
     
	 lcd_putc(hex2c(n/100000));
     8ba:	6f 2d       	mov	r22, r15
     8bc:	7e 2d       	mov	r23, r14
     8be:	8c 2d       	mov	r24, r12
     8c0:	9b 2d       	mov	r25, r11
     8c2:	20 ea       	ldi	r18, 0xA0	; 160
     8c4:	36 e8       	ldi	r19, 0x86	; 134
     8c6:	41 e0       	ldi	r20, 0x01	; 1
     8c8:	50 e0       	ldi	r21, 0x00	; 0
     8ca:	e0 d6       	rcall	.+3520   	; 0x168c <__udivmodsi4>


char hex2c(char hex)
{

   if(hex<0xa)
     8cc:	2a 30       	cpi	r18, 0x0A	; 10
     8ce:	18 f4       	brcc	.+6      	; 0x8d6 <printLL+0xce>
      return '0'+hex;
     8d0:	82 2f       	mov	r24, r18
     8d2:	80 5d       	subi	r24, 0xD0	; 208
     8d4:	02 c0       	rjmp	.+4      	; 0x8da <printLL+0xd2>
   else
      return 'a'+hex-0xa;		   
     8d6:	82 2f       	mov	r24, r18
     8d8:	89 5a       	subi	r24, 0xA9	; 169
	 	lcd_putc('.');
		sf=1;
	 }
	
     
	 lcd_putc(hex2c(n/100000));
     8da:	c4 de       	rcall	.-632    	; 0x664 <lcd_putc>
	 if(sf){frac++; if(frac>=prec)return;}
     8dc:	00 23       	and	r16, r16
     8de:	21 f0       	breq	.+8      	; 0x8e8 <printLL+0xe0>
     8e0:	1f 5f       	subi	r17, 0xFF	; 255
     8e2:	1a 15       	cp	r17, r10
     8e4:	08 f0       	brcs	.+2      	; 0x8e8 <printLL+0xe0>
     8e6:	bd c0       	rjmp	.+378    	; 0xa62 <printLL+0x25a>
	 n = n%100000;
     8e8:	6f 2d       	mov	r22, r15
     8ea:	7e 2d       	mov	r23, r14
     8ec:	8c 2d       	mov	r24, r12
     8ee:	9b 2d       	mov	r25, r11
     8f0:	20 ea       	ldi	r18, 0xA0	; 160
     8f2:	36 e8       	ldi	r19, 0x86	; 134
     8f4:	41 e0       	ldi	r20, 0x01	; 1
     8f6:	50 e0       	ldi	r21, 0x00	; 0
     8f8:	c9 d6       	rcall	.+3474   	; 0x168c <__udivmodsi4>
     8fa:	f6 2e       	mov	r15, r22
     8fc:	e7 2e       	mov	r14, r23
     8fe:	c8 2e       	mov	r12, r24
     900:	b9 2e       	mov	r11, r25
	 if(5==dot){
     902:	85 e0       	ldi	r24, 0x05	; 5
     904:	d8 16       	cp	r13, r24
     906:	19 f4       	brne	.+6      	; 0x90e <printLL+0x106>
	 	lcd_putc('.');
     908:	8e e2       	ldi	r24, 0x2E	; 46
     90a:	ac de       	rcall	.-680    	; 0x664 <lcd_putc>
     90c:	01 e0       	ldi	r16, 0x01	; 1
		sf=1;
	 }
	

	 lcd_putc(hex2c(n/10000)); 
     90e:	6f 2d       	mov	r22, r15
     910:	7e 2d       	mov	r23, r14
     912:	8c 2d       	mov	r24, r12
     914:	9b 2d       	mov	r25, r11
     916:	20 e1       	ldi	r18, 0x10	; 16
     918:	37 e2       	ldi	r19, 0x27	; 39
     91a:	40 e0       	ldi	r20, 0x00	; 0
     91c:	50 e0       	ldi	r21, 0x00	; 0
     91e:	b6 d6       	rcall	.+3436   	; 0x168c <__udivmodsi4>


char hex2c(char hex)
{

   if(hex<0xa)
     920:	2a 30       	cpi	r18, 0x0A	; 10
     922:	18 f4       	brcc	.+6      	; 0x92a <printLL+0x122>
      return '0'+hex;
     924:	82 2f       	mov	r24, r18
     926:	80 5d       	subi	r24, 0xD0	; 208
     928:	02 c0       	rjmp	.+4      	; 0x92e <printLL+0x126>
   else
      return 'a'+hex-0xa;		   
     92a:	82 2f       	mov	r24, r18
     92c:	89 5a       	subi	r24, 0xA9	; 169
	 	lcd_putc('.');
		sf=1;
	 }
	

	 lcd_putc(hex2c(n/10000)); 
     92e:	9a de       	rcall	.-716    	; 0x664 <lcd_putc>
	  if(sf){frac++; if(frac>=prec)return;}
     930:	00 23       	and	r16, r16
     932:	21 f0       	breq	.+8      	; 0x93c <printLL+0x134>
     934:	1f 5f       	subi	r17, 0xFF	; 255
     936:	1a 15       	cp	r17, r10
     938:	08 f0       	brcs	.+2      	; 0x93c <printLL+0x134>
     93a:	93 c0       	rjmp	.+294    	; 0xa62 <printLL+0x25a>
	 n = n%10000;
     93c:	6f 2d       	mov	r22, r15
     93e:	7e 2d       	mov	r23, r14
     940:	8c 2d       	mov	r24, r12
     942:	9b 2d       	mov	r25, r11
     944:	20 e1       	ldi	r18, 0x10	; 16
     946:	37 e2       	ldi	r19, 0x27	; 39
     948:	40 e0       	ldi	r20, 0x00	; 0
     94a:	50 e0       	ldi	r21, 0x00	; 0
     94c:	9f d6       	rcall	.+3390   	; 0x168c <__udivmodsi4>
     94e:	f6 2e       	mov	r15, r22
     950:	e7 2e       	mov	r14, r23
     952:	c8 2e       	mov	r12, r24
     954:	b9 2e       	mov	r11, r25
	 if(4==dot){
     956:	84 e0       	ldi	r24, 0x04	; 4
     958:	d8 16       	cp	r13, r24
     95a:	19 f4       	brne	.+6      	; 0x962 <printLL+0x15a>
	 	sf=1;
	 	lcd_putc('.');
     95c:	8e e2       	ldi	r24, 0x2E	; 46
     95e:	82 de       	rcall	.-764    	; 0x664 <lcd_putc>
     960:	01 e0       	ldi	r16, 0x01	; 1
	 }
	
	 lcd_putc(hex2c(n/1000));  //K
     962:	6f 2d       	mov	r22, r15
     964:	7e 2d       	mov	r23, r14
     966:	8c 2d       	mov	r24, r12
     968:	9b 2d       	mov	r25, r11
     96a:	28 ee       	ldi	r18, 0xE8	; 232
     96c:	33 e0       	ldi	r19, 0x03	; 3
     96e:	40 e0       	ldi	r20, 0x00	; 0
     970:	50 e0       	ldi	r21, 0x00	; 0
     972:	8c d6       	rcall	.+3352   	; 0x168c <__udivmodsi4>


char hex2c(char hex)
{

   if(hex<0xa)
     974:	2a 30       	cpi	r18, 0x0A	; 10
     976:	18 f4       	brcc	.+6      	; 0x97e <printLL+0x176>
      return '0'+hex;
     978:	82 2f       	mov	r24, r18
     97a:	80 5d       	subi	r24, 0xD0	; 208
     97c:	02 c0       	rjmp	.+4      	; 0x982 <printLL+0x17a>
   else
      return 'a'+hex-0xa;		   
     97e:	82 2f       	mov	r24, r18
     980:	89 5a       	subi	r24, 0xA9	; 169
	 if(4==dot){
	 	sf=1;
	 	lcd_putc('.');
	 }
	
	 lcd_putc(hex2c(n/1000));  //K
     982:	70 de       	rcall	.-800    	; 0x664 <lcd_putc>
	  if(sf){frac++; if(frac>=prec)return;}
     984:	00 23       	and	r16, r16
     986:	21 f0       	breq	.+8      	; 0x990 <printLL+0x188>
     988:	1f 5f       	subi	r17, 0xFF	; 255
     98a:	1a 15       	cp	r17, r10
     98c:	08 f0       	brcs	.+2      	; 0x990 <printLL+0x188>
     98e:	69 c0       	rjmp	.+210    	; 0xa62 <printLL+0x25a>
	 n = n%1000;
     990:	6f 2d       	mov	r22, r15
     992:	7e 2d       	mov	r23, r14
     994:	8c 2d       	mov	r24, r12
     996:	9b 2d       	mov	r25, r11
     998:	28 ee       	ldi	r18, 0xE8	; 232
     99a:	33 e0       	ldi	r19, 0x03	; 3
     99c:	40 e0       	ldi	r20, 0x00	; 0
     99e:	50 e0       	ldi	r21, 0x00	; 0
     9a0:	75 d6       	rcall	.+3306   	; 0x168c <__udivmodsi4>
     9a2:	f6 2e       	mov	r15, r22
     9a4:	e7 2e       	mov	r14, r23
     9a6:	c8 2e       	mov	r12, r24
     9a8:	b9 2e       	mov	r11, r25
	 if(3==dot){
     9aa:	83 e0       	ldi	r24, 0x03	; 3
     9ac:	d8 16       	cp	r13, r24
     9ae:	19 f4       	brne	.+6      	; 0x9b6 <printLL+0x1ae>
	 	lcd_putc('.');
     9b0:	8e e2       	ldi	r24, 0x2E	; 46
     9b2:	58 de       	rcall	.-848    	; 0x664 <lcd_putc>
     9b4:	01 e0       	ldi	r16, 0x01	; 1
		sf=1;
	  }
		   	
	 lcd_putc(hex2c(n/100));
     9b6:	6f 2d       	mov	r22, r15
     9b8:	7e 2d       	mov	r23, r14
     9ba:	8c 2d       	mov	r24, r12
     9bc:	9b 2d       	mov	r25, r11
     9be:	24 e6       	ldi	r18, 0x64	; 100
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	62 d6       	rcall	.+3268   	; 0x168c <__udivmodsi4>


char hex2c(char hex)
{

   if(hex<0xa)
     9c8:	2a 30       	cpi	r18, 0x0A	; 10
     9ca:	18 f4       	brcc	.+6      	; 0x9d2 <printLL+0x1ca>
      return '0'+hex;
     9cc:	82 2f       	mov	r24, r18
     9ce:	80 5d       	subi	r24, 0xD0	; 208
     9d0:	02 c0       	rjmp	.+4      	; 0x9d6 <printLL+0x1ce>
   else
      return 'a'+hex-0xa;		   
     9d2:	82 2f       	mov	r24, r18
     9d4:	89 5a       	subi	r24, 0xA9	; 169
	 if(3==dot){
	 	lcd_putc('.');
		sf=1;
	  }
		   	
	 lcd_putc(hex2c(n/100));
     9d6:	46 de       	rcall	.-884    	; 0x664 <lcd_putc>
	  if(sf){frac++; if(frac>=prec)return;}
     9d8:	00 23       	and	r16, r16
     9da:	21 f0       	breq	.+8      	; 0x9e4 <printLL+0x1dc>
     9dc:	1f 5f       	subi	r17, 0xFF	; 255
     9de:	1a 15       	cp	r17, r10
     9e0:	08 f0       	brcs	.+2      	; 0x9e4 <printLL+0x1dc>
     9e2:	3f c0       	rjmp	.+126    	; 0xa62 <printLL+0x25a>
	 n = n%100;
     9e4:	6f 2d       	mov	r22, r15
     9e6:	7e 2d       	mov	r23, r14
     9e8:	8c 2d       	mov	r24, r12
     9ea:	9b 2d       	mov	r25, r11
     9ec:	24 e6       	ldi	r18, 0x64	; 100
     9ee:	30 e0       	ldi	r19, 0x00	; 0
     9f0:	40 e0       	ldi	r20, 0x00	; 0
     9f2:	50 e0       	ldi	r21, 0x00	; 0
     9f4:	4b d6       	rcall	.+3222   	; 0x168c <__udivmodsi4>
     9f6:	f6 2e       	mov	r15, r22
     9f8:	e7 2e       	mov	r14, r23
     9fa:	c8 2e       	mov	r12, r24
     9fc:	b9 2e       	mov	r11, r25
	 if(2==dot){
     9fe:	82 e0       	ldi	r24, 0x02	; 2
     a00:	d8 16       	cp	r13, r24
     a02:	19 f4       	brne	.+6      	; 0xa0a <printLL+0x202>
	 	lcd_putc('.');
     a04:	8e e2       	ldi	r24, 0x2E	; 46
     a06:	2e de       	rcall	.-932    	; 0x664 <lcd_putc>
     a08:	01 e0       	ldi	r16, 0x01	; 1
		sf=1;
	 }
	 
	 lcd_putc( hex2c(n/10));
     a0a:	6f 2d       	mov	r22, r15
     a0c:	7e 2d       	mov	r23, r14
     a0e:	8c 2d       	mov	r24, r12
     a10:	9b 2d       	mov	r25, r11
     a12:	2a e0       	ldi	r18, 0x0A	; 10
     a14:	30 e0       	ldi	r19, 0x00	; 0
     a16:	40 e0       	ldi	r20, 0x00	; 0
     a18:	50 e0       	ldi	r21, 0x00	; 0
     a1a:	38 d6       	rcall	.+3184   	; 0x168c <__udivmodsi4>


char hex2c(char hex)
{

   if(hex<0xa)
     a1c:	2a 30       	cpi	r18, 0x0A	; 10
     a1e:	18 f4       	brcc	.+6      	; 0xa26 <printLL+0x21e>
      return '0'+hex;
     a20:	82 2f       	mov	r24, r18
     a22:	80 5d       	subi	r24, 0xD0	; 208
     a24:	02 c0       	rjmp	.+4      	; 0xa2a <printLL+0x222>
   else
      return 'a'+hex-0xa;		   
     a26:	82 2f       	mov	r24, r18
     a28:	89 5a       	subi	r24, 0xA9	; 169
	 if(2==dot){
	 	lcd_putc('.');
		sf=1;
	 }
	 
	 lcd_putc( hex2c(n/10));
     a2a:	1c de       	rcall	.-968    	; 0x664 <lcd_putc>
	  if(sf){frac++; if(frac>=prec)return;}
     a2c:	00 23       	and	r16, r16
     a2e:	19 f0       	breq	.+6      	; 0xa36 <printLL+0x22e>
     a30:	1f 5f       	subi	r17, 0xFF	; 255
     a32:	1a 15       	cp	r17, r10
     a34:	b0 f4       	brcc	.+44     	; 0xa62 <printLL+0x25a>
	 if(1==dot){
     a36:	81 e0       	ldi	r24, 0x01	; 1
     a38:	d8 16       	cp	r13, r24
     a3a:	11 f4       	brne	.+4      	; 0xa40 <printLL+0x238>
	 	sf=1;
	 	lcd_putc('.');
     a3c:	8e e2       	ldi	r24, 0x2E	; 46
     a3e:	12 de       	rcall	.-988    	; 0x664 <lcd_putc>
	 }
	 lcd_putc( hex2c(n%10));
     a40:	6f 2d       	mov	r22, r15
     a42:	7e 2d       	mov	r23, r14
     a44:	8c 2d       	mov	r24, r12
     a46:	9b 2d       	mov	r25, r11
     a48:	2a e0       	ldi	r18, 0x0A	; 10
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	40 e0       	ldi	r20, 0x00	; 0
     a4e:	50 e0       	ldi	r21, 0x00	; 0
     a50:	1d d6       	rcall	.+3130   	; 0x168c <__udivmodsi4>


char hex2c(char hex)
{

   if(hex<0xa)
     a52:	6a 30       	cpi	r22, 0x0A	; 10
     a54:	18 f4       	brcc	.+6      	; 0xa5c <printLL+0x254>
      return '0'+hex;
     a56:	86 2f       	mov	r24, r22
     a58:	80 5d       	subi	r24, 0xD0	; 208
     a5a:	02 c0       	rjmp	.+4      	; 0xa60 <printLL+0x258>
   else
      return 'a'+hex-0xa;		   
     a5c:	86 2f       	mov	r24, r22
     a5e:	89 5a       	subi	r24, 0xA9	; 169
	  if(sf){frac++; if(frac>=prec)return;}
	 if(1==dot){
	 	sf=1;
	 	lcd_putc('.');
	 }
	 lcd_putc( hex2c(n%10));
     a60:	01 de       	rcall	.-1022   	; 0x664 <lcd_putc>
	 if(sf){frac++; if(frac>=prec)return;}
}
     a62:	1f 91       	pop	r17
     a64:	0f 91       	pop	r16
     a66:	ff 90       	pop	r15
     a68:	ef 90       	pop	r14
     a6a:	df 90       	pop	r13
     a6c:	cf 90       	pop	r12
     a6e:	bf 90       	pop	r11
     a70:	af 90       	pop	r10
     a72:	08 95       	ret

00000a74 <print10>:




void print10(unsigned short n)
{
     a74:	0f 93       	push	r16
     a76:	1f 93       	push	r17
     a78:	cf 93       	push	r28
     a7a:	df 93       	push	r29
     a7c:	ec 01       	movw	r28, r24
     char x;
	 x=n/1000;
     a7e:	68 ee       	ldi	r22, 0xE8	; 232
     a80:	73 e0       	ldi	r23, 0x03	; 3
     a82:	f0 d5       	rcall	.+3040   	; 0x1664 <__udivmodhi4>
	 if(x)
     a84:	66 23       	and	r22, r22
     a86:	41 f0       	breq	.+16     	; 0xa98 <print10+0x24>


char hex2c(char hex)
{

   if(hex<0xa)
     a88:	6a 30       	cpi	r22, 0x0A	; 10
     a8a:	18 f4       	brcc	.+6      	; 0xa92 <print10+0x1e>
      return '0'+hex;
     a8c:	86 2f       	mov	r24, r22
     a8e:	80 5d       	subi	r24, 0xD0	; 208
     a90:	02 c0       	rjmp	.+4      	; 0xa96 <print10+0x22>
   else
      return 'a'+hex-0xa;		   
     a92:	86 2f       	mov	r24, r22
     a94:	89 5a       	subi	r24, 0xA9	; 169
void print10(unsigned short n)
{
     char x;
	 x=n/1000;
	 if(x)
	    lcd_putc(hex2c(x));
     a96:	e6 dd       	rcall	.-1076   	; 0x664 <lcd_putc>
	 n = n%1000;
     a98:	ce 01       	movw	r24, r28
     a9a:	68 ee       	ldi	r22, 0xE8	; 232
     a9c:	73 e0       	ldi	r23, 0x03	; 3
     a9e:	e2 d5       	rcall	.+3012   	; 0x1664 <__udivmodhi4>
     aa0:	18 2f       	mov	r17, r24
     aa2:	09 2f       	mov	r16, r25

	 lcd_putc(hex2c(n/100));
     aa4:	64 e6       	ldi	r22, 0x64	; 100
     aa6:	70 e0       	ldi	r23, 0x00	; 0
     aa8:	dd d5       	rcall	.+3002   	; 0x1664 <__udivmodhi4>


char hex2c(char hex)
{

   if(hex<0xa)
     aaa:	6a 30       	cpi	r22, 0x0A	; 10
     aac:	18 f4       	brcc	.+6      	; 0xab4 <print10+0x40>
      return '0'+hex;
     aae:	86 2f       	mov	r24, r22
     ab0:	80 5d       	subi	r24, 0xD0	; 208
     ab2:	02 c0       	rjmp	.+4      	; 0xab8 <print10+0x44>
   else
      return 'a'+hex-0xa;		   
     ab4:	86 2f       	mov	r24, r22
     ab6:	89 5a       	subi	r24, 0xA9	; 169
	 x=n/1000;
	 if(x)
	    lcd_putc(hex2c(x));
	 n = n%1000;

	 lcd_putc(hex2c(n/100));
     ab8:	d5 dd       	rcall	.-1110   	; 0x664 <lcd_putc>
	 n = n%100;
     aba:	81 2f       	mov	r24, r17
     abc:	90 2f       	mov	r25, r16
     abe:	64 e6       	ldi	r22, 0x64	; 100
     ac0:	70 e0       	ldi	r23, 0x00	; 0
     ac2:	d0 d5       	rcall	.+2976   	; 0x1664 <__udivmodhi4>
     ac4:	18 2f       	mov	r17, r24
     ac6:	09 2f       	mov	r16, r25

	 lcd_putc( hex2c(n/10));
     ac8:	6a e0       	ldi	r22, 0x0A	; 10
     aca:	70 e0       	ldi	r23, 0x00	; 0
     acc:	cb d5       	rcall	.+2966   	; 0x1664 <__udivmodhi4>


char hex2c(char hex)
{

   if(hex<0xa)
     ace:	6a 30       	cpi	r22, 0x0A	; 10
     ad0:	18 f4       	brcc	.+6      	; 0xad8 <print10+0x64>
      return '0'+hex;
     ad2:	86 2f       	mov	r24, r22
     ad4:	80 5d       	subi	r24, 0xD0	; 208
     ad6:	02 c0       	rjmp	.+4      	; 0xadc <print10+0x68>
   else
      return 'a'+hex-0xa;		   
     ad8:	86 2f       	mov	r24, r22
     ada:	89 5a       	subi	r24, 0xA9	; 169
	 n = n%1000;

	 lcd_putc(hex2c(n/100));
	 n = n%100;

	 lcd_putc( hex2c(n/10));
     adc:	c3 dd       	rcall	.-1146   	; 0x664 <lcd_putc>
	 lcd_putc( hex2c(n%10));
     ade:	81 2f       	mov	r24, r17
     ae0:	90 2f       	mov	r25, r16
     ae2:	6a e0       	ldi	r22, 0x0A	; 10
     ae4:	70 e0       	ldi	r23, 0x00	; 0
     ae6:	be d5       	rcall	.+2940   	; 0x1664 <__udivmodhi4>


char hex2c(char hex)
{

   if(hex<0xa)
     ae8:	8a 30       	cpi	r24, 0x0A	; 10
     aea:	10 f4       	brcc	.+4      	; 0xaf0 <print10+0x7c>
      return '0'+hex;
     aec:	80 5d       	subi	r24, 0xD0	; 208
     aee:	01 c0       	rjmp	.+2      	; 0xaf2 <print10+0x7e>
   else
      return 'a'+hex-0xa;		   
     af0:	89 5a       	subi	r24, 0xA9	; 169

	 lcd_putc(hex2c(n/100));
	 n = n%100;

	 lcd_putc( hex2c(n/10));
	 lcd_putc( hex2c(n%10));
     af2:	b8 dd       	rcall	.-1168   	; 0x664 <lcd_putc>
}
     af4:	df 91       	pop	r29
     af6:	cf 91       	pop	r28
     af8:	1f 91       	pop	r17
     afa:	0f 91       	pop	r16
     afc:	08 95       	ret

00000afe <lcd_showhex>:
   else
      return 'a'+hex-0xa;		   
}

lcd_showhex(unsigned char x)
{
     afe:	1f 93       	push	r17
     b00:	18 2f       	mov	r17, r24
  
    lcd_putc(hex2c(((x&0xF0)>>4)));
     b02:	82 95       	swap	r24
     b04:	8f 70       	andi	r24, 0x0F	; 15


char hex2c(char hex)
{

   if(hex<0xa)
     b06:	8a 30       	cpi	r24, 0x0A	; 10
     b08:	10 f4       	brcc	.+4      	; 0xb0e <lcd_showhex+0x10>
      return '0'+hex;
     b0a:	80 5d       	subi	r24, 0xD0	; 208
     b0c:	01 c0       	rjmp	.+2      	; 0xb10 <lcd_showhex+0x12>
   else
      return 'a'+hex-0xa;		   
     b0e:	89 5a       	subi	r24, 0xA9	; 169
}

lcd_showhex(unsigned char x)
{
  
    lcd_putc(hex2c(((x&0xF0)>>4)));
     b10:	a9 dd       	rcall	.-1198   	; 0x664 <lcd_putc>
    lcd_putc(hex2c((x&0xF)));
     b12:	81 2f       	mov	r24, r17
     b14:	8f 70       	andi	r24, 0x0F	; 15


char hex2c(char hex)
{

   if(hex<0xa)
     b16:	8a 30       	cpi	r24, 0x0A	; 10
     b18:	10 f4       	brcc	.+4      	; 0xb1e <lcd_showhex+0x20>
      return '0'+hex;
     b1a:	80 5d       	subi	r24, 0xD0	; 208
     b1c:	01 c0       	rjmp	.+2      	; 0xb20 <lcd_showhex+0x22>
   else
      return 'a'+hex-0xa;		   
     b1e:	89 5a       	subi	r24, 0xA9	; 169

lcd_showhex(unsigned char x)
{
  
    lcd_putc(hex2c(((x&0xF0)>>4)));
    lcd_putc(hex2c((x&0xF)));
     b20:	a1 dd       	rcall	.-1214   	; 0x664 <lcd_putc>

}
     b22:	1f 91       	pop	r17
     b24:	08 95       	ret

00000b26 <__fixunssfsi>:
     b26:	ef 92       	push	r14
     b28:	ff 92       	push	r15
     b2a:	0f 93       	push	r16
     b2c:	1f 93       	push	r17
     b2e:	7b 01       	movw	r14, r22
     b30:	8c 01       	movw	r16, r24
     b32:	20 e0       	ldi	r18, 0x00	; 0
     b34:	30 e0       	ldi	r19, 0x00	; 0
     b36:	40 e0       	ldi	r20, 0x00	; 0
     b38:	5f e4       	ldi	r21, 0x4F	; 79
     b3a:	ae d2       	rcall	.+1372   	; 0x1098 <__gesf2>
     b3c:	88 23       	and	r24, r24
     b3e:	7c f0       	brlt	.+30     	; 0xb5e <__fixunssfsi+0x38>
     b40:	c8 01       	movw	r24, r16
     b42:	b7 01       	movw	r22, r14
     b44:	20 e0       	ldi	r18, 0x00	; 0
     b46:	30 e0       	ldi	r19, 0x00	; 0
     b48:	40 e0       	ldi	r20, 0x00	; 0
     b4a:	5f e4       	ldi	r21, 0x4F	; 79
     b4c:	5e d1       	rcall	.+700    	; 0xe0a <__subsf3>
     b4e:	cf d2       	rcall	.+1438   	; 0x10ee <__fixsfsi>
     b50:	9b 01       	movw	r18, r22
     b52:	ac 01       	movw	r20, r24
     b54:	20 50       	subi	r18, 0x00	; 0
     b56:	30 40       	sbci	r19, 0x00	; 0
     b58:	40 40       	sbci	r20, 0x00	; 0
     b5a:	50 48       	sbci	r21, 0x80	; 128
     b5c:	05 c0       	rjmp	.+10     	; 0xb68 <__fixunssfsi+0x42>
     b5e:	c8 01       	movw	r24, r16
     b60:	b7 01       	movw	r22, r14
     b62:	c5 d2       	rcall	.+1418   	; 0x10ee <__fixsfsi>
     b64:	9b 01       	movw	r18, r22
     b66:	ac 01       	movw	r20, r24
     b68:	b9 01       	movw	r22, r18
     b6a:	ca 01       	movw	r24, r20
     b6c:	1f 91       	pop	r17
     b6e:	0f 91       	pop	r16
     b70:	ff 90       	pop	r15
     b72:	ef 90       	pop	r14
     b74:	08 95       	ret

00000b76 <_fpadd_parts>:
     b76:	a0 e0       	ldi	r26, 0x00	; 0
     b78:	b0 e0       	ldi	r27, 0x00	; 0
     b7a:	e0 ec       	ldi	r30, 0xC0	; 192
     b7c:	f5 e0       	ldi	r31, 0x05	; 5
     b7e:	a8 c5       	rjmp	.+2896   	; 0x16d0 <__prologue_saves__>
     b80:	dc 01       	movw	r26, r24
     b82:	2b 01       	movw	r4, r22
     b84:	fa 01       	movw	r30, r20
     b86:	9c 91       	ld	r25, X
     b88:	92 30       	cpi	r25, 0x02	; 2
     b8a:	08 f4       	brcc	.+2      	; 0xb8e <_fpadd_parts+0x18>
     b8c:	39 c1       	rjmp	.+626    	; 0xe00 <_fpadd_parts+0x28a>
     b8e:	eb 01       	movw	r28, r22
     b90:	88 81       	ld	r24, Y
     b92:	82 30       	cpi	r24, 0x02	; 2
     b94:	08 f4       	brcc	.+2      	; 0xb98 <_fpadd_parts+0x22>
     b96:	33 c1       	rjmp	.+614    	; 0xdfe <_fpadd_parts+0x288>
     b98:	94 30       	cpi	r25, 0x04	; 4
     b9a:	69 f4       	brne	.+26     	; 0xbb6 <_fpadd_parts+0x40>
     b9c:	84 30       	cpi	r24, 0x04	; 4
     b9e:	09 f0       	breq	.+2      	; 0xba2 <_fpadd_parts+0x2c>
     ba0:	2f c1       	rjmp	.+606    	; 0xe00 <_fpadd_parts+0x28a>
     ba2:	11 96       	adiw	r26, 0x01	; 1
     ba4:	9c 91       	ld	r25, X
     ba6:	11 97       	sbiw	r26, 0x01	; 1
     ba8:	89 81       	ldd	r24, Y+1	; 0x01
     baa:	98 17       	cp	r25, r24
     bac:	09 f4       	brne	.+2      	; 0xbb0 <_fpadd_parts+0x3a>
     bae:	28 c1       	rjmp	.+592    	; 0xe00 <_fpadd_parts+0x28a>
     bb0:	a2 e8       	ldi	r26, 0x82	; 130
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	25 c1       	rjmp	.+586    	; 0xe00 <_fpadd_parts+0x28a>
     bb6:	84 30       	cpi	r24, 0x04	; 4
     bb8:	09 f4       	brne	.+2      	; 0xbbc <_fpadd_parts+0x46>
     bba:	21 c1       	rjmp	.+578    	; 0xdfe <_fpadd_parts+0x288>
     bbc:	82 30       	cpi	r24, 0x02	; 2
     bbe:	a9 f4       	brne	.+42     	; 0xbea <_fpadd_parts+0x74>
     bc0:	92 30       	cpi	r25, 0x02	; 2
     bc2:	09 f0       	breq	.+2      	; 0xbc6 <_fpadd_parts+0x50>
     bc4:	1d c1       	rjmp	.+570    	; 0xe00 <_fpadd_parts+0x28a>
     bc6:	9a 01       	movw	r18, r20
     bc8:	ad 01       	movw	r20, r26
     bca:	88 e0       	ldi	r24, 0x08	; 8
     bcc:	ea 01       	movw	r28, r20
     bce:	09 90       	ld	r0, Y+
     bd0:	ae 01       	movw	r20, r28
     bd2:	e9 01       	movw	r28, r18
     bd4:	09 92       	st	Y+, r0
     bd6:	9e 01       	movw	r18, r28
     bd8:	81 50       	subi	r24, 0x01	; 1
     bda:	c1 f7       	brne	.-16     	; 0xbcc <_fpadd_parts+0x56>
     bdc:	e2 01       	movw	r28, r4
     bde:	89 81       	ldd	r24, Y+1	; 0x01
     be0:	11 96       	adiw	r26, 0x01	; 1
     be2:	9c 91       	ld	r25, X
     be4:	89 23       	and	r24, r25
     be6:	81 83       	std	Z+1, r24	; 0x01
     be8:	08 c1       	rjmp	.+528    	; 0xdfa <_fpadd_parts+0x284>
     bea:	92 30       	cpi	r25, 0x02	; 2
     bec:	09 f4       	brne	.+2      	; 0xbf0 <_fpadd_parts+0x7a>
     bee:	07 c1       	rjmp	.+526    	; 0xdfe <_fpadd_parts+0x288>
     bf0:	12 96       	adiw	r26, 0x02	; 2
     bf2:	2d 90       	ld	r2, X+
     bf4:	3c 90       	ld	r3, X
     bf6:	13 97       	sbiw	r26, 0x03	; 3
     bf8:	eb 01       	movw	r28, r22
     bfa:	8a 81       	ldd	r24, Y+2	; 0x02
     bfc:	9b 81       	ldd	r25, Y+3	; 0x03
     bfe:	14 96       	adiw	r26, 0x04	; 4
     c00:	ad 90       	ld	r10, X+
     c02:	bd 90       	ld	r11, X+
     c04:	cd 90       	ld	r12, X+
     c06:	dc 90       	ld	r13, X
     c08:	17 97       	sbiw	r26, 0x07	; 7
     c0a:	ec 80       	ldd	r14, Y+4	; 0x04
     c0c:	fd 80       	ldd	r15, Y+5	; 0x05
     c0e:	0e 81       	ldd	r16, Y+6	; 0x06
     c10:	1f 81       	ldd	r17, Y+7	; 0x07
     c12:	91 01       	movw	r18, r2
     c14:	28 1b       	sub	r18, r24
     c16:	39 0b       	sbc	r19, r25
     c18:	b9 01       	movw	r22, r18
     c1a:	37 ff       	sbrs	r19, 7
     c1c:	04 c0       	rjmp	.+8      	; 0xc26 <_fpadd_parts+0xb0>
     c1e:	66 27       	eor	r22, r22
     c20:	77 27       	eor	r23, r23
     c22:	62 1b       	sub	r22, r18
     c24:	73 0b       	sbc	r23, r19
     c26:	60 32       	cpi	r22, 0x20	; 32
     c28:	71 05       	cpc	r23, r1
     c2a:	0c f0       	brlt	.+2      	; 0xc2e <_fpadd_parts+0xb8>
     c2c:	61 c0       	rjmp	.+194    	; 0xcf0 <_fpadd_parts+0x17a>
     c2e:	12 16       	cp	r1, r18
     c30:	13 06       	cpc	r1, r19
     c32:	6c f5       	brge	.+90     	; 0xc8e <_fpadd_parts+0x118>
     c34:	37 01       	movw	r6, r14
     c36:	48 01       	movw	r8, r16
     c38:	06 2e       	mov	r0, r22
     c3a:	04 c0       	rjmp	.+8      	; 0xc44 <_fpadd_parts+0xce>
     c3c:	96 94       	lsr	r9
     c3e:	87 94       	ror	r8
     c40:	77 94       	ror	r7
     c42:	67 94       	ror	r6
     c44:	0a 94       	dec	r0
     c46:	d2 f7       	brpl	.-12     	; 0xc3c <_fpadd_parts+0xc6>
     c48:	21 e0       	ldi	r18, 0x01	; 1
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	40 e0       	ldi	r20, 0x00	; 0
     c4e:	50 e0       	ldi	r21, 0x00	; 0
     c50:	04 c0       	rjmp	.+8      	; 0xc5a <_fpadd_parts+0xe4>
     c52:	22 0f       	add	r18, r18
     c54:	33 1f       	adc	r19, r19
     c56:	44 1f       	adc	r20, r20
     c58:	55 1f       	adc	r21, r21
     c5a:	6a 95       	dec	r22
     c5c:	d2 f7       	brpl	.-12     	; 0xc52 <_fpadd_parts+0xdc>
     c5e:	21 50       	subi	r18, 0x01	; 1
     c60:	30 40       	sbci	r19, 0x00	; 0
     c62:	40 40       	sbci	r20, 0x00	; 0
     c64:	50 40       	sbci	r21, 0x00	; 0
     c66:	2e 21       	and	r18, r14
     c68:	3f 21       	and	r19, r15
     c6a:	40 23       	and	r20, r16
     c6c:	51 23       	and	r21, r17
     c6e:	21 15       	cp	r18, r1
     c70:	31 05       	cpc	r19, r1
     c72:	41 05       	cpc	r20, r1
     c74:	51 05       	cpc	r21, r1
     c76:	21 f0       	breq	.+8      	; 0xc80 <_fpadd_parts+0x10a>
     c78:	21 e0       	ldi	r18, 0x01	; 1
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	40 e0       	ldi	r20, 0x00	; 0
     c7e:	50 e0       	ldi	r21, 0x00	; 0
     c80:	79 01       	movw	r14, r18
     c82:	8a 01       	movw	r16, r20
     c84:	e6 28       	or	r14, r6
     c86:	f7 28       	or	r15, r7
     c88:	08 29       	or	r16, r8
     c8a:	19 29       	or	r17, r9
     c8c:	3c c0       	rjmp	.+120    	; 0xd06 <_fpadd_parts+0x190>
     c8e:	23 2b       	or	r18, r19
     c90:	d1 f1       	breq	.+116    	; 0xd06 <_fpadd_parts+0x190>
     c92:	26 0e       	add	r2, r22
     c94:	37 1e       	adc	r3, r23
     c96:	35 01       	movw	r6, r10
     c98:	46 01       	movw	r8, r12
     c9a:	06 2e       	mov	r0, r22
     c9c:	04 c0       	rjmp	.+8      	; 0xca6 <_fpadd_parts+0x130>
     c9e:	96 94       	lsr	r9
     ca0:	87 94       	ror	r8
     ca2:	77 94       	ror	r7
     ca4:	67 94       	ror	r6
     ca6:	0a 94       	dec	r0
     ca8:	d2 f7       	brpl	.-12     	; 0xc9e <_fpadd_parts+0x128>
     caa:	21 e0       	ldi	r18, 0x01	; 1
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	40 e0       	ldi	r20, 0x00	; 0
     cb0:	50 e0       	ldi	r21, 0x00	; 0
     cb2:	04 c0       	rjmp	.+8      	; 0xcbc <_fpadd_parts+0x146>
     cb4:	22 0f       	add	r18, r18
     cb6:	33 1f       	adc	r19, r19
     cb8:	44 1f       	adc	r20, r20
     cba:	55 1f       	adc	r21, r21
     cbc:	6a 95       	dec	r22
     cbe:	d2 f7       	brpl	.-12     	; 0xcb4 <_fpadd_parts+0x13e>
     cc0:	21 50       	subi	r18, 0x01	; 1
     cc2:	30 40       	sbci	r19, 0x00	; 0
     cc4:	40 40       	sbci	r20, 0x00	; 0
     cc6:	50 40       	sbci	r21, 0x00	; 0
     cc8:	2a 21       	and	r18, r10
     cca:	3b 21       	and	r19, r11
     ccc:	4c 21       	and	r20, r12
     cce:	5d 21       	and	r21, r13
     cd0:	21 15       	cp	r18, r1
     cd2:	31 05       	cpc	r19, r1
     cd4:	41 05       	cpc	r20, r1
     cd6:	51 05       	cpc	r21, r1
     cd8:	21 f0       	breq	.+8      	; 0xce2 <_fpadd_parts+0x16c>
     cda:	21 e0       	ldi	r18, 0x01	; 1
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	40 e0       	ldi	r20, 0x00	; 0
     ce0:	50 e0       	ldi	r21, 0x00	; 0
     ce2:	59 01       	movw	r10, r18
     ce4:	6a 01       	movw	r12, r20
     ce6:	a6 28       	or	r10, r6
     ce8:	b7 28       	or	r11, r7
     cea:	c8 28       	or	r12, r8
     cec:	d9 28       	or	r13, r9
     cee:	0b c0       	rjmp	.+22     	; 0xd06 <_fpadd_parts+0x190>
     cf0:	82 15       	cp	r24, r2
     cf2:	93 05       	cpc	r25, r3
     cf4:	2c f0       	brlt	.+10     	; 0xd00 <_fpadd_parts+0x18a>
     cf6:	1c 01       	movw	r2, r24
     cf8:	aa 24       	eor	r10, r10
     cfa:	bb 24       	eor	r11, r11
     cfc:	65 01       	movw	r12, r10
     cfe:	03 c0       	rjmp	.+6      	; 0xd06 <_fpadd_parts+0x190>
     d00:	ee 24       	eor	r14, r14
     d02:	ff 24       	eor	r15, r15
     d04:	87 01       	movw	r16, r14
     d06:	11 96       	adiw	r26, 0x01	; 1
     d08:	9c 91       	ld	r25, X
     d0a:	d2 01       	movw	r26, r4
     d0c:	11 96       	adiw	r26, 0x01	; 1
     d0e:	8c 91       	ld	r24, X
     d10:	98 17       	cp	r25, r24
     d12:	09 f4       	brne	.+2      	; 0xd16 <_fpadd_parts+0x1a0>
     d14:	45 c0       	rjmp	.+138    	; 0xda0 <_fpadd_parts+0x22a>
     d16:	99 23       	and	r25, r25
     d18:	39 f0       	breq	.+14     	; 0xd28 <_fpadd_parts+0x1b2>
     d1a:	a8 01       	movw	r20, r16
     d1c:	97 01       	movw	r18, r14
     d1e:	2a 19       	sub	r18, r10
     d20:	3b 09       	sbc	r19, r11
     d22:	4c 09       	sbc	r20, r12
     d24:	5d 09       	sbc	r21, r13
     d26:	06 c0       	rjmp	.+12     	; 0xd34 <_fpadd_parts+0x1be>
     d28:	a6 01       	movw	r20, r12
     d2a:	95 01       	movw	r18, r10
     d2c:	2e 19       	sub	r18, r14
     d2e:	3f 09       	sbc	r19, r15
     d30:	40 0b       	sbc	r20, r16
     d32:	51 0b       	sbc	r21, r17
     d34:	57 fd       	sbrc	r21, 7
     d36:	08 c0       	rjmp	.+16     	; 0xd48 <_fpadd_parts+0x1d2>
     d38:	11 82       	std	Z+1, r1	; 0x01
     d3a:	33 82       	std	Z+3, r3	; 0x03
     d3c:	22 82       	std	Z+2, r2	; 0x02
     d3e:	24 83       	std	Z+4, r18	; 0x04
     d40:	35 83       	std	Z+5, r19	; 0x05
     d42:	46 83       	std	Z+6, r20	; 0x06
     d44:	57 83       	std	Z+7, r21	; 0x07
     d46:	1d c0       	rjmp	.+58     	; 0xd82 <_fpadd_parts+0x20c>
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	81 83       	std	Z+1, r24	; 0x01
     d4c:	33 82       	std	Z+3, r3	; 0x03
     d4e:	22 82       	std	Z+2, r2	; 0x02
     d50:	88 27       	eor	r24, r24
     d52:	99 27       	eor	r25, r25
     d54:	dc 01       	movw	r26, r24
     d56:	82 1b       	sub	r24, r18
     d58:	93 0b       	sbc	r25, r19
     d5a:	a4 0b       	sbc	r26, r20
     d5c:	b5 0b       	sbc	r27, r21
     d5e:	84 83       	std	Z+4, r24	; 0x04
     d60:	95 83       	std	Z+5, r25	; 0x05
     d62:	a6 83       	std	Z+6, r26	; 0x06
     d64:	b7 83       	std	Z+7, r27	; 0x07
     d66:	0d c0       	rjmp	.+26     	; 0xd82 <_fpadd_parts+0x20c>
     d68:	22 0f       	add	r18, r18
     d6a:	33 1f       	adc	r19, r19
     d6c:	44 1f       	adc	r20, r20
     d6e:	55 1f       	adc	r21, r21
     d70:	24 83       	std	Z+4, r18	; 0x04
     d72:	35 83       	std	Z+5, r19	; 0x05
     d74:	46 83       	std	Z+6, r20	; 0x06
     d76:	57 83       	std	Z+7, r21	; 0x07
     d78:	82 81       	ldd	r24, Z+2	; 0x02
     d7a:	93 81       	ldd	r25, Z+3	; 0x03
     d7c:	01 97       	sbiw	r24, 0x01	; 1
     d7e:	93 83       	std	Z+3, r25	; 0x03
     d80:	82 83       	std	Z+2, r24	; 0x02
     d82:	24 81       	ldd	r18, Z+4	; 0x04
     d84:	35 81       	ldd	r19, Z+5	; 0x05
     d86:	46 81       	ldd	r20, Z+6	; 0x06
     d88:	57 81       	ldd	r21, Z+7	; 0x07
     d8a:	da 01       	movw	r26, r20
     d8c:	c9 01       	movw	r24, r18
     d8e:	01 97       	sbiw	r24, 0x01	; 1
     d90:	a1 09       	sbc	r26, r1
     d92:	b1 09       	sbc	r27, r1
     d94:	8f 5f       	subi	r24, 0xFF	; 255
     d96:	9f 4f       	sbci	r25, 0xFF	; 255
     d98:	af 4f       	sbci	r26, 0xFF	; 255
     d9a:	bf 43       	sbci	r27, 0x3F	; 63
     d9c:	28 f3       	brcs	.-54     	; 0xd68 <_fpadd_parts+0x1f2>
     d9e:	0b c0       	rjmp	.+22     	; 0xdb6 <_fpadd_parts+0x240>
     da0:	91 83       	std	Z+1, r25	; 0x01
     da2:	33 82       	std	Z+3, r3	; 0x03
     da4:	22 82       	std	Z+2, r2	; 0x02
     da6:	ea 0c       	add	r14, r10
     da8:	fb 1c       	adc	r15, r11
     daa:	0c 1d       	adc	r16, r12
     dac:	1d 1d       	adc	r17, r13
     dae:	e4 82       	std	Z+4, r14	; 0x04
     db0:	f5 82       	std	Z+5, r15	; 0x05
     db2:	06 83       	std	Z+6, r16	; 0x06
     db4:	17 83       	std	Z+7, r17	; 0x07
     db6:	83 e0       	ldi	r24, 0x03	; 3
     db8:	80 83       	st	Z, r24
     dba:	24 81       	ldd	r18, Z+4	; 0x04
     dbc:	35 81       	ldd	r19, Z+5	; 0x05
     dbe:	46 81       	ldd	r20, Z+6	; 0x06
     dc0:	57 81       	ldd	r21, Z+7	; 0x07
     dc2:	57 ff       	sbrs	r21, 7
     dc4:	1a c0       	rjmp	.+52     	; 0xdfa <_fpadd_parts+0x284>
     dc6:	c9 01       	movw	r24, r18
     dc8:	aa 27       	eor	r26, r26
     dca:	97 fd       	sbrc	r25, 7
     dcc:	a0 95       	com	r26
     dce:	ba 2f       	mov	r27, r26
     dd0:	81 70       	andi	r24, 0x01	; 1
     dd2:	90 70       	andi	r25, 0x00	; 0
     dd4:	a0 70       	andi	r26, 0x00	; 0
     dd6:	b0 70       	andi	r27, 0x00	; 0
     dd8:	56 95       	lsr	r21
     dda:	47 95       	ror	r20
     ddc:	37 95       	ror	r19
     dde:	27 95       	ror	r18
     de0:	82 2b       	or	r24, r18
     de2:	93 2b       	or	r25, r19
     de4:	a4 2b       	or	r26, r20
     de6:	b5 2b       	or	r27, r21
     de8:	84 83       	std	Z+4, r24	; 0x04
     dea:	95 83       	std	Z+5, r25	; 0x05
     dec:	a6 83       	std	Z+6, r26	; 0x06
     dee:	b7 83       	std	Z+7, r27	; 0x07
     df0:	82 81       	ldd	r24, Z+2	; 0x02
     df2:	93 81       	ldd	r25, Z+3	; 0x03
     df4:	01 96       	adiw	r24, 0x01	; 1
     df6:	93 83       	std	Z+3, r25	; 0x03
     df8:	82 83       	std	Z+2, r24	; 0x02
     dfa:	df 01       	movw	r26, r30
     dfc:	01 c0       	rjmp	.+2      	; 0xe00 <_fpadd_parts+0x28a>
     dfe:	d2 01       	movw	r26, r4
     e00:	cd 01       	movw	r24, r26
     e02:	cd b7       	in	r28, 0x3d	; 61
     e04:	de b7       	in	r29, 0x3e	; 62
     e06:	e2 e1       	ldi	r30, 0x12	; 18
     e08:	7f c4       	rjmp	.+2302   	; 0x1708 <__epilogue_restores__>

00000e0a <__subsf3>:
     e0a:	a0 e2       	ldi	r26, 0x20	; 32
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	ea e0       	ldi	r30, 0x0A	; 10
     e10:	f7 e0       	ldi	r31, 0x07	; 7
     e12:	6a c4       	rjmp	.+2260   	; 0x16e8 <__prologue_saves__+0x18>
     e14:	69 83       	std	Y+1, r22	; 0x01
     e16:	7a 83       	std	Y+2, r23	; 0x02
     e18:	8b 83       	std	Y+3, r24	; 0x03
     e1a:	9c 83       	std	Y+4, r25	; 0x04
     e1c:	2d 83       	std	Y+5, r18	; 0x05
     e1e:	3e 83       	std	Y+6, r19	; 0x06
     e20:	4f 83       	std	Y+7, r20	; 0x07
     e22:	58 87       	std	Y+8, r21	; 0x08
     e24:	e9 e0       	ldi	r30, 0x09	; 9
     e26:	ee 2e       	mov	r14, r30
     e28:	f1 2c       	mov	r15, r1
     e2a:	ec 0e       	add	r14, r28
     e2c:	fd 1e       	adc	r15, r29
     e2e:	ce 01       	movw	r24, r28
     e30:	01 96       	adiw	r24, 0x01	; 1
     e32:	b7 01       	movw	r22, r14
     e34:	46 d3       	rcall	.+1676   	; 0x14c2 <__unpack_f>
     e36:	8e 01       	movw	r16, r28
     e38:	0f 5e       	subi	r16, 0xEF	; 239
     e3a:	1f 4f       	sbci	r17, 0xFF	; 255
     e3c:	ce 01       	movw	r24, r28
     e3e:	05 96       	adiw	r24, 0x05	; 5
     e40:	b8 01       	movw	r22, r16
     e42:	3f d3       	rcall	.+1662   	; 0x14c2 <__unpack_f>
     e44:	8a 89       	ldd	r24, Y+18	; 0x12
     e46:	91 e0       	ldi	r25, 0x01	; 1
     e48:	89 27       	eor	r24, r25
     e4a:	8a 8b       	std	Y+18, r24	; 0x12
     e4c:	c7 01       	movw	r24, r14
     e4e:	b8 01       	movw	r22, r16
     e50:	ae 01       	movw	r20, r28
     e52:	47 5e       	subi	r20, 0xE7	; 231
     e54:	5f 4f       	sbci	r21, 0xFF	; 255
     e56:	8f de       	rcall	.-738    	; 0xb76 <_fpadd_parts>
     e58:	5f d2       	rcall	.+1214   	; 0x1318 <__pack_f>
     e5a:	a0 96       	adiw	r28, 0x20	; 32
     e5c:	e6 e0       	ldi	r30, 0x06	; 6
     e5e:	60 c4       	rjmp	.+2240   	; 0x1720 <__epilogue_restores__+0x18>

00000e60 <__addsf3>:
     e60:	a0 e2       	ldi	r26, 0x20	; 32
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e5 e3       	ldi	r30, 0x35	; 53
     e66:	f7 e0       	ldi	r31, 0x07	; 7
     e68:	3f c4       	rjmp	.+2174   	; 0x16e8 <__prologue_saves__+0x18>
     e6a:	69 83       	std	Y+1, r22	; 0x01
     e6c:	7a 83       	std	Y+2, r23	; 0x02
     e6e:	8b 83       	std	Y+3, r24	; 0x03
     e70:	9c 83       	std	Y+4, r25	; 0x04
     e72:	2d 83       	std	Y+5, r18	; 0x05
     e74:	3e 83       	std	Y+6, r19	; 0x06
     e76:	4f 83       	std	Y+7, r20	; 0x07
     e78:	58 87       	std	Y+8, r21	; 0x08
     e7a:	f9 e0       	ldi	r31, 0x09	; 9
     e7c:	ef 2e       	mov	r14, r31
     e7e:	f1 2c       	mov	r15, r1
     e80:	ec 0e       	add	r14, r28
     e82:	fd 1e       	adc	r15, r29
     e84:	ce 01       	movw	r24, r28
     e86:	01 96       	adiw	r24, 0x01	; 1
     e88:	b7 01       	movw	r22, r14
     e8a:	1b d3       	rcall	.+1590   	; 0x14c2 <__unpack_f>
     e8c:	8e 01       	movw	r16, r28
     e8e:	0f 5e       	subi	r16, 0xEF	; 239
     e90:	1f 4f       	sbci	r17, 0xFF	; 255
     e92:	ce 01       	movw	r24, r28
     e94:	05 96       	adiw	r24, 0x05	; 5
     e96:	b8 01       	movw	r22, r16
     e98:	14 d3       	rcall	.+1576   	; 0x14c2 <__unpack_f>
     e9a:	c7 01       	movw	r24, r14
     e9c:	b8 01       	movw	r22, r16
     e9e:	ae 01       	movw	r20, r28
     ea0:	47 5e       	subi	r20, 0xE7	; 231
     ea2:	5f 4f       	sbci	r21, 0xFF	; 255
     ea4:	68 de       	rcall	.-816    	; 0xb76 <_fpadd_parts>
     ea6:	38 d2       	rcall	.+1136   	; 0x1318 <__pack_f>
     ea8:	a0 96       	adiw	r28, 0x20	; 32
     eaa:	e6 e0       	ldi	r30, 0x06	; 6
     eac:	39 c4       	rjmp	.+2162   	; 0x1720 <__epilogue_restores__+0x18>

00000eae <__mulsf3>:
     eae:	a0 e2       	ldi	r26, 0x20	; 32
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	ec e5       	ldi	r30, 0x5C	; 92
     eb4:	f7 e0       	ldi	r31, 0x07	; 7
     eb6:	0c c4       	rjmp	.+2072   	; 0x16d0 <__prologue_saves__>
     eb8:	69 83       	std	Y+1, r22	; 0x01
     eba:	7a 83       	std	Y+2, r23	; 0x02
     ebc:	8b 83       	std	Y+3, r24	; 0x03
     ebe:	9c 83       	std	Y+4, r25	; 0x04
     ec0:	2d 83       	std	Y+5, r18	; 0x05
     ec2:	3e 83       	std	Y+6, r19	; 0x06
     ec4:	4f 83       	std	Y+7, r20	; 0x07
     ec6:	58 87       	std	Y+8, r21	; 0x08
     ec8:	ce 01       	movw	r24, r28
     eca:	01 96       	adiw	r24, 0x01	; 1
     ecc:	be 01       	movw	r22, r28
     ece:	67 5f       	subi	r22, 0xF7	; 247
     ed0:	7f 4f       	sbci	r23, 0xFF	; 255
     ed2:	f7 d2       	rcall	.+1518   	; 0x14c2 <__unpack_f>
     ed4:	ce 01       	movw	r24, r28
     ed6:	05 96       	adiw	r24, 0x05	; 5
     ed8:	be 01       	movw	r22, r28
     eda:	6f 5e       	subi	r22, 0xEF	; 239
     edc:	7f 4f       	sbci	r23, 0xFF	; 255
     ede:	f1 d2       	rcall	.+1506   	; 0x14c2 <__unpack_f>
     ee0:	99 85       	ldd	r25, Y+9	; 0x09
     ee2:	92 30       	cpi	r25, 0x02	; 2
     ee4:	88 f0       	brcs	.+34     	; 0xf08 <__mulsf3+0x5a>
     ee6:	89 89       	ldd	r24, Y+17	; 0x11
     ee8:	82 30       	cpi	r24, 0x02	; 2
     eea:	c8 f0       	brcs	.+50     	; 0xf1e <__mulsf3+0x70>
     eec:	94 30       	cpi	r25, 0x04	; 4
     eee:	19 f4       	brne	.+6      	; 0xef6 <__mulsf3+0x48>
     ef0:	82 30       	cpi	r24, 0x02	; 2
     ef2:	51 f4       	brne	.+20     	; 0xf08 <__mulsf3+0x5a>
     ef4:	04 c0       	rjmp	.+8      	; 0xefe <__mulsf3+0x50>
     ef6:	84 30       	cpi	r24, 0x04	; 4
     ef8:	29 f4       	brne	.+10     	; 0xf04 <__mulsf3+0x56>
     efa:	92 30       	cpi	r25, 0x02	; 2
     efc:	81 f4       	brne	.+32     	; 0xf1e <__mulsf3+0x70>
     efe:	82 e8       	ldi	r24, 0x82	; 130
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	c6 c0       	rjmp	.+396    	; 0x1090 <__mulsf3+0x1e2>
     f04:	92 30       	cpi	r25, 0x02	; 2
     f06:	49 f4       	brne	.+18     	; 0xf1a <__mulsf3+0x6c>
     f08:	20 e0       	ldi	r18, 0x00	; 0
     f0a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f0c:	8a 89       	ldd	r24, Y+18	; 0x12
     f0e:	98 13       	cpse	r25, r24
     f10:	21 e0       	ldi	r18, 0x01	; 1
     f12:	2a 87       	std	Y+10, r18	; 0x0a
     f14:	ce 01       	movw	r24, r28
     f16:	09 96       	adiw	r24, 0x09	; 9
     f18:	bb c0       	rjmp	.+374    	; 0x1090 <__mulsf3+0x1e2>
     f1a:	82 30       	cpi	r24, 0x02	; 2
     f1c:	49 f4       	brne	.+18     	; 0xf30 <__mulsf3+0x82>
     f1e:	20 e0       	ldi	r18, 0x00	; 0
     f20:	9a 85       	ldd	r25, Y+10	; 0x0a
     f22:	8a 89       	ldd	r24, Y+18	; 0x12
     f24:	98 13       	cpse	r25, r24
     f26:	21 e0       	ldi	r18, 0x01	; 1
     f28:	2a 8b       	std	Y+18, r18	; 0x12
     f2a:	ce 01       	movw	r24, r28
     f2c:	41 96       	adiw	r24, 0x11	; 17
     f2e:	b0 c0       	rjmp	.+352    	; 0x1090 <__mulsf3+0x1e2>
     f30:	2d 84       	ldd	r2, Y+13	; 0x0d
     f32:	3e 84       	ldd	r3, Y+14	; 0x0e
     f34:	4f 84       	ldd	r4, Y+15	; 0x0f
     f36:	58 88       	ldd	r5, Y+16	; 0x10
     f38:	6d 88       	ldd	r6, Y+21	; 0x15
     f3a:	7e 88       	ldd	r7, Y+22	; 0x16
     f3c:	8f 88       	ldd	r8, Y+23	; 0x17
     f3e:	98 8c       	ldd	r9, Y+24	; 0x18
     f40:	ee 24       	eor	r14, r14
     f42:	ff 24       	eor	r15, r15
     f44:	87 01       	movw	r16, r14
     f46:	aa 24       	eor	r10, r10
     f48:	bb 24       	eor	r11, r11
     f4a:	65 01       	movw	r12, r10
     f4c:	40 e0       	ldi	r20, 0x00	; 0
     f4e:	50 e0       	ldi	r21, 0x00	; 0
     f50:	60 e0       	ldi	r22, 0x00	; 0
     f52:	70 e0       	ldi	r23, 0x00	; 0
     f54:	e0 e0       	ldi	r30, 0x00	; 0
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	c1 01       	movw	r24, r2
     f5a:	81 70       	andi	r24, 0x01	; 1
     f5c:	90 70       	andi	r25, 0x00	; 0
     f5e:	89 2b       	or	r24, r25
     f60:	e9 f0       	breq	.+58     	; 0xf9c <__mulsf3+0xee>
     f62:	e6 0c       	add	r14, r6
     f64:	f7 1c       	adc	r15, r7
     f66:	08 1d       	adc	r16, r8
     f68:	19 1d       	adc	r17, r9
     f6a:	9a 01       	movw	r18, r20
     f6c:	ab 01       	movw	r20, r22
     f6e:	2a 0d       	add	r18, r10
     f70:	3b 1d       	adc	r19, r11
     f72:	4c 1d       	adc	r20, r12
     f74:	5d 1d       	adc	r21, r13
     f76:	80 e0       	ldi	r24, 0x00	; 0
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	a0 e0       	ldi	r26, 0x00	; 0
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	e6 14       	cp	r14, r6
     f80:	f7 04       	cpc	r15, r7
     f82:	08 05       	cpc	r16, r8
     f84:	19 05       	cpc	r17, r9
     f86:	20 f4       	brcc	.+8      	; 0xf90 <__mulsf3+0xe2>
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	a0 e0       	ldi	r26, 0x00	; 0
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	ba 01       	movw	r22, r20
     f92:	a9 01       	movw	r20, r18
     f94:	48 0f       	add	r20, r24
     f96:	59 1f       	adc	r21, r25
     f98:	6a 1f       	adc	r22, r26
     f9a:	7b 1f       	adc	r23, r27
     f9c:	aa 0c       	add	r10, r10
     f9e:	bb 1c       	adc	r11, r11
     fa0:	cc 1c       	adc	r12, r12
     fa2:	dd 1c       	adc	r13, r13
     fa4:	97 fe       	sbrs	r9, 7
     fa6:	08 c0       	rjmp	.+16     	; 0xfb8 <__mulsf3+0x10a>
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	a0 e0       	ldi	r26, 0x00	; 0
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	a8 2a       	or	r10, r24
     fb2:	b9 2a       	or	r11, r25
     fb4:	ca 2a       	or	r12, r26
     fb6:	db 2a       	or	r13, r27
     fb8:	31 96       	adiw	r30, 0x01	; 1
     fba:	e0 32       	cpi	r30, 0x20	; 32
     fbc:	f1 05       	cpc	r31, r1
     fbe:	49 f0       	breq	.+18     	; 0xfd2 <__mulsf3+0x124>
     fc0:	66 0c       	add	r6, r6
     fc2:	77 1c       	adc	r7, r7
     fc4:	88 1c       	adc	r8, r8
     fc6:	99 1c       	adc	r9, r9
     fc8:	56 94       	lsr	r5
     fca:	47 94       	ror	r4
     fcc:	37 94       	ror	r3
     fce:	27 94       	ror	r2
     fd0:	c3 cf       	rjmp	.-122    	; 0xf58 <__mulsf3+0xaa>
     fd2:	fa 85       	ldd	r31, Y+10	; 0x0a
     fd4:	ea 89       	ldd	r30, Y+18	; 0x12
     fd6:	2b 89       	ldd	r18, Y+19	; 0x13
     fd8:	3c 89       	ldd	r19, Y+20	; 0x14
     fda:	8b 85       	ldd	r24, Y+11	; 0x0b
     fdc:	9c 85       	ldd	r25, Y+12	; 0x0c
     fde:	28 0f       	add	r18, r24
     fe0:	39 1f       	adc	r19, r25
     fe2:	2e 5f       	subi	r18, 0xFE	; 254
     fe4:	3f 4f       	sbci	r19, 0xFF	; 255
     fe6:	17 c0       	rjmp	.+46     	; 0x1016 <__mulsf3+0x168>
     fe8:	ca 01       	movw	r24, r20
     fea:	81 70       	andi	r24, 0x01	; 1
     fec:	90 70       	andi	r25, 0x00	; 0
     fee:	89 2b       	or	r24, r25
     ff0:	61 f0       	breq	.+24     	; 0x100a <__mulsf3+0x15c>
     ff2:	16 95       	lsr	r17
     ff4:	07 95       	ror	r16
     ff6:	f7 94       	ror	r15
     ff8:	e7 94       	ror	r14
     ffa:	80 e0       	ldi	r24, 0x00	; 0
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	a0 e0       	ldi	r26, 0x00	; 0
    1000:	b0 e8       	ldi	r27, 0x80	; 128
    1002:	e8 2a       	or	r14, r24
    1004:	f9 2a       	or	r15, r25
    1006:	0a 2b       	or	r16, r26
    1008:	1b 2b       	or	r17, r27
    100a:	76 95       	lsr	r23
    100c:	67 95       	ror	r22
    100e:	57 95       	ror	r21
    1010:	47 95       	ror	r20
    1012:	2f 5f       	subi	r18, 0xFF	; 255
    1014:	3f 4f       	sbci	r19, 0xFF	; 255
    1016:	77 fd       	sbrc	r23, 7
    1018:	e7 cf       	rjmp	.-50     	; 0xfe8 <__mulsf3+0x13a>
    101a:	0c c0       	rjmp	.+24     	; 0x1034 <__mulsf3+0x186>
    101c:	44 0f       	add	r20, r20
    101e:	55 1f       	adc	r21, r21
    1020:	66 1f       	adc	r22, r22
    1022:	77 1f       	adc	r23, r23
    1024:	17 fd       	sbrc	r17, 7
    1026:	41 60       	ori	r20, 0x01	; 1
    1028:	ee 0c       	add	r14, r14
    102a:	ff 1c       	adc	r15, r15
    102c:	00 1f       	adc	r16, r16
    102e:	11 1f       	adc	r17, r17
    1030:	21 50       	subi	r18, 0x01	; 1
    1032:	30 40       	sbci	r19, 0x00	; 0
    1034:	40 30       	cpi	r20, 0x00	; 0
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	59 07       	cpc	r21, r25
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	69 07       	cpc	r22, r25
    103e:	90 e4       	ldi	r25, 0x40	; 64
    1040:	79 07       	cpc	r23, r25
    1042:	60 f3       	brcs	.-40     	; 0x101c <__mulsf3+0x16e>
    1044:	2b 8f       	std	Y+27, r18	; 0x1b
    1046:	3c 8f       	std	Y+28, r19	; 0x1c
    1048:	db 01       	movw	r26, r22
    104a:	ca 01       	movw	r24, r20
    104c:	8f 77       	andi	r24, 0x7F	; 127
    104e:	90 70       	andi	r25, 0x00	; 0
    1050:	a0 70       	andi	r26, 0x00	; 0
    1052:	b0 70       	andi	r27, 0x00	; 0
    1054:	80 34       	cpi	r24, 0x40	; 64
    1056:	91 05       	cpc	r25, r1
    1058:	a1 05       	cpc	r26, r1
    105a:	b1 05       	cpc	r27, r1
    105c:	61 f4       	brne	.+24     	; 0x1076 <__mulsf3+0x1c8>
    105e:	47 fd       	sbrc	r20, 7
    1060:	0a c0       	rjmp	.+20     	; 0x1076 <__mulsf3+0x1c8>
    1062:	e1 14       	cp	r14, r1
    1064:	f1 04       	cpc	r15, r1
    1066:	01 05       	cpc	r16, r1
    1068:	11 05       	cpc	r17, r1
    106a:	29 f0       	breq	.+10     	; 0x1076 <__mulsf3+0x1c8>
    106c:	40 5c       	subi	r20, 0xC0	; 192
    106e:	5f 4f       	sbci	r21, 0xFF	; 255
    1070:	6f 4f       	sbci	r22, 0xFF	; 255
    1072:	7f 4f       	sbci	r23, 0xFF	; 255
    1074:	40 78       	andi	r20, 0x80	; 128
    1076:	1a 8e       	std	Y+26, r1	; 0x1a
    1078:	fe 17       	cp	r31, r30
    107a:	11 f0       	breq	.+4      	; 0x1080 <__mulsf3+0x1d2>
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	8a 8f       	std	Y+26, r24	; 0x1a
    1080:	4d 8f       	std	Y+29, r20	; 0x1d
    1082:	5e 8f       	std	Y+30, r21	; 0x1e
    1084:	6f 8f       	std	Y+31, r22	; 0x1f
    1086:	78 a3       	std	Y+32, r23	; 0x20
    1088:	83 e0       	ldi	r24, 0x03	; 3
    108a:	89 8f       	std	Y+25, r24	; 0x19
    108c:	ce 01       	movw	r24, r28
    108e:	49 96       	adiw	r24, 0x19	; 25
    1090:	43 d1       	rcall	.+646    	; 0x1318 <__pack_f>
    1092:	a0 96       	adiw	r28, 0x20	; 32
    1094:	e2 e1       	ldi	r30, 0x12	; 18
    1096:	38 c3       	rjmp	.+1648   	; 0x1708 <__epilogue_restores__>

00001098 <__gesf2>:
    1098:	a8 e1       	ldi	r26, 0x18	; 24
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	e1 e5       	ldi	r30, 0x51	; 81
    109e:	f8 e0       	ldi	r31, 0x08	; 8
    10a0:	23 c3       	rjmp	.+1606   	; 0x16e8 <__prologue_saves__+0x18>
    10a2:	69 83       	std	Y+1, r22	; 0x01
    10a4:	7a 83       	std	Y+2, r23	; 0x02
    10a6:	8b 83       	std	Y+3, r24	; 0x03
    10a8:	9c 83       	std	Y+4, r25	; 0x04
    10aa:	2d 83       	std	Y+5, r18	; 0x05
    10ac:	3e 83       	std	Y+6, r19	; 0x06
    10ae:	4f 83       	std	Y+7, r20	; 0x07
    10b0:	58 87       	std	Y+8, r21	; 0x08
    10b2:	89 e0       	ldi	r24, 0x09	; 9
    10b4:	e8 2e       	mov	r14, r24
    10b6:	f1 2c       	mov	r15, r1
    10b8:	ec 0e       	add	r14, r28
    10ba:	fd 1e       	adc	r15, r29
    10bc:	ce 01       	movw	r24, r28
    10be:	01 96       	adiw	r24, 0x01	; 1
    10c0:	b7 01       	movw	r22, r14
    10c2:	ff d1       	rcall	.+1022   	; 0x14c2 <__unpack_f>
    10c4:	8e 01       	movw	r16, r28
    10c6:	0f 5e       	subi	r16, 0xEF	; 239
    10c8:	1f 4f       	sbci	r17, 0xFF	; 255
    10ca:	ce 01       	movw	r24, r28
    10cc:	05 96       	adiw	r24, 0x05	; 5
    10ce:	b8 01       	movw	r22, r16
    10d0:	f8 d1       	rcall	.+1008   	; 0x14c2 <__unpack_f>
    10d2:	89 85       	ldd	r24, Y+9	; 0x09
    10d4:	82 30       	cpi	r24, 0x02	; 2
    10d6:	38 f0       	brcs	.+14     	; 0x10e6 <__gesf2+0x4e>
    10d8:	89 89       	ldd	r24, Y+17	; 0x11
    10da:	82 30       	cpi	r24, 0x02	; 2
    10dc:	20 f0       	brcs	.+8      	; 0x10e6 <__gesf2+0x4e>
    10de:	c7 01       	movw	r24, r14
    10e0:	b8 01       	movw	r22, r16
    10e2:	67 d2       	rcall	.+1230   	; 0x15b2 <__fpcmp_parts_f>
    10e4:	01 c0       	rjmp	.+2      	; 0x10e8 <__gesf2+0x50>
    10e6:	8f ef       	ldi	r24, 0xFF	; 255
    10e8:	68 96       	adiw	r28, 0x18	; 24
    10ea:	e6 e0       	ldi	r30, 0x06	; 6
    10ec:	19 c3       	rjmp	.+1586   	; 0x1720 <__epilogue_restores__+0x18>

000010ee <__fixsfsi>:
    10ee:	ac e0       	ldi	r26, 0x0C	; 12
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	ec e7       	ldi	r30, 0x7C	; 124
    10f4:	f8 e0       	ldi	r31, 0x08	; 8
    10f6:	fc c2       	rjmp	.+1528   	; 0x16f0 <__prologue_saves__+0x20>
    10f8:	69 83       	std	Y+1, r22	; 0x01
    10fa:	7a 83       	std	Y+2, r23	; 0x02
    10fc:	8b 83       	std	Y+3, r24	; 0x03
    10fe:	9c 83       	std	Y+4, r25	; 0x04
    1100:	ce 01       	movw	r24, r28
    1102:	01 96       	adiw	r24, 0x01	; 1
    1104:	be 01       	movw	r22, r28
    1106:	6b 5f       	subi	r22, 0xFB	; 251
    1108:	7f 4f       	sbci	r23, 0xFF	; 255
    110a:	db d1       	rcall	.+950    	; 0x14c2 <__unpack_f>
    110c:	8d 81       	ldd	r24, Y+5	; 0x05
    110e:	82 30       	cpi	r24, 0x02	; 2
    1110:	61 f1       	breq	.+88     	; 0x116a <__fixsfsi+0x7c>
    1112:	82 30       	cpi	r24, 0x02	; 2
    1114:	50 f1       	brcs	.+84     	; 0x116a <__fixsfsi+0x7c>
    1116:	84 30       	cpi	r24, 0x04	; 4
    1118:	21 f4       	brne	.+8      	; 0x1122 <__fixsfsi+0x34>
    111a:	8e 81       	ldd	r24, Y+6	; 0x06
    111c:	88 23       	and	r24, r24
    111e:	51 f1       	breq	.+84     	; 0x1174 <__fixsfsi+0x86>
    1120:	2e c0       	rjmp	.+92     	; 0x117e <__fixsfsi+0x90>
    1122:	2f 81       	ldd	r18, Y+7	; 0x07
    1124:	38 85       	ldd	r19, Y+8	; 0x08
    1126:	37 fd       	sbrc	r19, 7
    1128:	20 c0       	rjmp	.+64     	; 0x116a <__fixsfsi+0x7c>
    112a:	6e 81       	ldd	r22, Y+6	; 0x06
    112c:	2f 31       	cpi	r18, 0x1F	; 31
    112e:	31 05       	cpc	r19, r1
    1130:	1c f0       	brlt	.+6      	; 0x1138 <__fixsfsi+0x4a>
    1132:	66 23       	and	r22, r22
    1134:	f9 f0       	breq	.+62     	; 0x1174 <__fixsfsi+0x86>
    1136:	23 c0       	rjmp	.+70     	; 0x117e <__fixsfsi+0x90>
    1138:	8e e1       	ldi	r24, 0x1E	; 30
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	82 1b       	sub	r24, r18
    113e:	93 0b       	sbc	r25, r19
    1140:	29 85       	ldd	r18, Y+9	; 0x09
    1142:	3a 85       	ldd	r19, Y+10	; 0x0a
    1144:	4b 85       	ldd	r20, Y+11	; 0x0b
    1146:	5c 85       	ldd	r21, Y+12	; 0x0c
    1148:	04 c0       	rjmp	.+8      	; 0x1152 <__fixsfsi+0x64>
    114a:	56 95       	lsr	r21
    114c:	47 95       	ror	r20
    114e:	37 95       	ror	r19
    1150:	27 95       	ror	r18
    1152:	8a 95       	dec	r24
    1154:	d2 f7       	brpl	.-12     	; 0x114a <__fixsfsi+0x5c>
    1156:	66 23       	and	r22, r22
    1158:	b1 f0       	breq	.+44     	; 0x1186 <__fixsfsi+0x98>
    115a:	50 95       	com	r21
    115c:	40 95       	com	r20
    115e:	30 95       	com	r19
    1160:	21 95       	neg	r18
    1162:	3f 4f       	sbci	r19, 0xFF	; 255
    1164:	4f 4f       	sbci	r20, 0xFF	; 255
    1166:	5f 4f       	sbci	r21, 0xFF	; 255
    1168:	0e c0       	rjmp	.+28     	; 0x1186 <__fixsfsi+0x98>
    116a:	20 e0       	ldi	r18, 0x00	; 0
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	40 e0       	ldi	r20, 0x00	; 0
    1170:	50 e0       	ldi	r21, 0x00	; 0
    1172:	09 c0       	rjmp	.+18     	; 0x1186 <__fixsfsi+0x98>
    1174:	2f ef       	ldi	r18, 0xFF	; 255
    1176:	3f ef       	ldi	r19, 0xFF	; 255
    1178:	4f ef       	ldi	r20, 0xFF	; 255
    117a:	5f e7       	ldi	r21, 0x7F	; 127
    117c:	04 c0       	rjmp	.+8      	; 0x1186 <__fixsfsi+0x98>
    117e:	20 e0       	ldi	r18, 0x00	; 0
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	40 e0       	ldi	r20, 0x00	; 0
    1184:	50 e8       	ldi	r21, 0x80	; 128
    1186:	b9 01       	movw	r22, r18
    1188:	ca 01       	movw	r24, r20
    118a:	2c 96       	adiw	r28, 0x0c	; 12
    118c:	e2 e0       	ldi	r30, 0x02	; 2
    118e:	cc c2       	rjmp	.+1432   	; 0x1728 <__epilogue_restores__+0x20>

00001190 <__floatunsisf>:
    1190:	a8 e0       	ldi	r26, 0x08	; 8
    1192:	b0 e0       	ldi	r27, 0x00	; 0
    1194:	ed ec       	ldi	r30, 0xCD	; 205
    1196:	f8 e0       	ldi	r31, 0x08	; 8
    1198:	a3 c2       	rjmp	.+1350   	; 0x16e0 <__prologue_saves__+0x10>
    119a:	7b 01       	movw	r14, r22
    119c:	8c 01       	movw	r16, r24
    119e:	61 15       	cp	r22, r1
    11a0:	71 05       	cpc	r23, r1
    11a2:	81 05       	cpc	r24, r1
    11a4:	91 05       	cpc	r25, r1
    11a6:	19 f4       	brne	.+6      	; 0x11ae <__floatunsisf+0x1e>
    11a8:	82 e0       	ldi	r24, 0x02	; 2
    11aa:	89 83       	std	Y+1, r24	; 0x01
    11ac:	5f c0       	rjmp	.+190    	; 0x126c <__floatunsisf+0xdc>
    11ae:	83 e0       	ldi	r24, 0x03	; 3
    11b0:	89 83       	std	Y+1, r24	; 0x01
    11b2:	8e e1       	ldi	r24, 0x1E	; 30
    11b4:	c8 2e       	mov	r12, r24
    11b6:	d1 2c       	mov	r13, r1
    11b8:	dc 82       	std	Y+4, r13	; 0x04
    11ba:	cb 82       	std	Y+3, r12	; 0x03
    11bc:	ed 82       	std	Y+5, r14	; 0x05
    11be:	fe 82       	std	Y+6, r15	; 0x06
    11c0:	0f 83       	std	Y+7, r16	; 0x07
    11c2:	18 87       	std	Y+8, r17	; 0x08
    11c4:	c8 01       	movw	r24, r16
    11c6:	b7 01       	movw	r22, r14
    11c8:	58 d0       	rcall	.+176    	; 0x127a <__clzsi2>
    11ca:	fc 01       	movw	r30, r24
    11cc:	31 97       	sbiw	r30, 0x01	; 1
    11ce:	f7 ff       	sbrs	r31, 7
    11d0:	3b c0       	rjmp	.+118    	; 0x1248 <__floatunsisf+0xb8>
    11d2:	22 27       	eor	r18, r18
    11d4:	33 27       	eor	r19, r19
    11d6:	2e 1b       	sub	r18, r30
    11d8:	3f 0b       	sbc	r19, r31
    11da:	57 01       	movw	r10, r14
    11dc:	68 01       	movw	r12, r16
    11de:	02 2e       	mov	r0, r18
    11e0:	04 c0       	rjmp	.+8      	; 0x11ea <__floatunsisf+0x5a>
    11e2:	d6 94       	lsr	r13
    11e4:	c7 94       	ror	r12
    11e6:	b7 94       	ror	r11
    11e8:	a7 94       	ror	r10
    11ea:	0a 94       	dec	r0
    11ec:	d2 f7       	brpl	.-12     	; 0x11e2 <__floatunsisf+0x52>
    11ee:	40 e0       	ldi	r20, 0x00	; 0
    11f0:	50 e0       	ldi	r21, 0x00	; 0
    11f2:	60 e0       	ldi	r22, 0x00	; 0
    11f4:	70 e0       	ldi	r23, 0x00	; 0
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	a0 e0       	ldi	r26, 0x00	; 0
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	04 c0       	rjmp	.+8      	; 0x1208 <__floatunsisf+0x78>
    1200:	88 0f       	add	r24, r24
    1202:	99 1f       	adc	r25, r25
    1204:	aa 1f       	adc	r26, r26
    1206:	bb 1f       	adc	r27, r27
    1208:	2a 95       	dec	r18
    120a:	d2 f7       	brpl	.-12     	; 0x1200 <__floatunsisf+0x70>
    120c:	01 97       	sbiw	r24, 0x01	; 1
    120e:	a1 09       	sbc	r26, r1
    1210:	b1 09       	sbc	r27, r1
    1212:	8e 21       	and	r24, r14
    1214:	9f 21       	and	r25, r15
    1216:	a0 23       	and	r26, r16
    1218:	b1 23       	and	r27, r17
    121a:	00 97       	sbiw	r24, 0x00	; 0
    121c:	a1 05       	cpc	r26, r1
    121e:	b1 05       	cpc	r27, r1
    1220:	21 f0       	breq	.+8      	; 0x122a <__floatunsisf+0x9a>
    1222:	41 e0       	ldi	r20, 0x01	; 1
    1224:	50 e0       	ldi	r21, 0x00	; 0
    1226:	60 e0       	ldi	r22, 0x00	; 0
    1228:	70 e0       	ldi	r23, 0x00	; 0
    122a:	4a 29       	or	r20, r10
    122c:	5b 29       	or	r21, r11
    122e:	6c 29       	or	r22, r12
    1230:	7d 29       	or	r23, r13
    1232:	4d 83       	std	Y+5, r20	; 0x05
    1234:	5e 83       	std	Y+6, r21	; 0x06
    1236:	6f 83       	std	Y+7, r22	; 0x07
    1238:	78 87       	std	Y+8, r23	; 0x08
    123a:	8e e1       	ldi	r24, 0x1E	; 30
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	8e 1b       	sub	r24, r30
    1240:	9f 0b       	sbc	r25, r31
    1242:	9c 83       	std	Y+4, r25	; 0x04
    1244:	8b 83       	std	Y+3, r24	; 0x03
    1246:	12 c0       	rjmp	.+36     	; 0x126c <__floatunsisf+0xdc>
    1248:	30 97       	sbiw	r30, 0x00	; 0
    124a:	81 f0       	breq	.+32     	; 0x126c <__floatunsisf+0xdc>
    124c:	0e 2e       	mov	r0, r30
    124e:	04 c0       	rjmp	.+8      	; 0x1258 <__floatunsisf+0xc8>
    1250:	ee 0c       	add	r14, r14
    1252:	ff 1c       	adc	r15, r15
    1254:	00 1f       	adc	r16, r16
    1256:	11 1f       	adc	r17, r17
    1258:	0a 94       	dec	r0
    125a:	d2 f7       	brpl	.-12     	; 0x1250 <__floatunsisf+0xc0>
    125c:	ed 82       	std	Y+5, r14	; 0x05
    125e:	fe 82       	std	Y+6, r15	; 0x06
    1260:	0f 83       	std	Y+7, r16	; 0x07
    1262:	18 87       	std	Y+8, r17	; 0x08
    1264:	ce 1a       	sub	r12, r30
    1266:	df 0a       	sbc	r13, r31
    1268:	dc 82       	std	Y+4, r13	; 0x04
    126a:	cb 82       	std	Y+3, r12	; 0x03
    126c:	1a 82       	std	Y+2, r1	; 0x02
    126e:	ce 01       	movw	r24, r28
    1270:	01 96       	adiw	r24, 0x01	; 1
    1272:	52 d0       	rcall	.+164    	; 0x1318 <__pack_f>
    1274:	28 96       	adiw	r28, 0x08	; 8
    1276:	ea e0       	ldi	r30, 0x0A	; 10
    1278:	4f c2       	rjmp	.+1182   	; 0x1718 <__epilogue_restores__+0x10>

0000127a <__clzsi2>:
    127a:	ef 92       	push	r14
    127c:	ff 92       	push	r15
    127e:	0f 93       	push	r16
    1280:	1f 93       	push	r17
    1282:	7b 01       	movw	r14, r22
    1284:	8c 01       	movw	r16, r24
    1286:	80 e0       	ldi	r24, 0x00	; 0
    1288:	e8 16       	cp	r14, r24
    128a:	80 e0       	ldi	r24, 0x00	; 0
    128c:	f8 06       	cpc	r15, r24
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	08 07       	cpc	r16, r24
    1292:	80 e0       	ldi	r24, 0x00	; 0
    1294:	18 07       	cpc	r17, r24
    1296:	88 f4       	brcc	.+34     	; 0x12ba <__clzsi2+0x40>
    1298:	8f ef       	ldi	r24, 0xFF	; 255
    129a:	e8 16       	cp	r14, r24
    129c:	f1 04       	cpc	r15, r1
    129e:	01 05       	cpc	r16, r1
    12a0:	11 05       	cpc	r17, r1
    12a2:	31 f0       	breq	.+12     	; 0x12b0 <__clzsi2+0x36>
    12a4:	28 f0       	brcs	.+10     	; 0x12b0 <__clzsi2+0x36>
    12a6:	88 e0       	ldi	r24, 0x08	; 8
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	a0 e0       	ldi	r26, 0x00	; 0
    12ac:	b0 e0       	ldi	r27, 0x00	; 0
    12ae:	17 c0       	rjmp	.+46     	; 0x12de <__clzsi2+0x64>
    12b0:	80 e0       	ldi	r24, 0x00	; 0
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	a0 e0       	ldi	r26, 0x00	; 0
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	12 c0       	rjmp	.+36     	; 0x12de <__clzsi2+0x64>
    12ba:	80 e0       	ldi	r24, 0x00	; 0
    12bc:	e8 16       	cp	r14, r24
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	f8 06       	cpc	r15, r24
    12c2:	80 e0       	ldi	r24, 0x00	; 0
    12c4:	08 07       	cpc	r16, r24
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	18 07       	cpc	r17, r24
    12ca:	28 f0       	brcs	.+10     	; 0x12d6 <__clzsi2+0x5c>
    12cc:	88 e1       	ldi	r24, 0x18	; 24
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	a0 e0       	ldi	r26, 0x00	; 0
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	04 c0       	rjmp	.+8      	; 0x12de <__clzsi2+0x64>
    12d6:	80 e1       	ldi	r24, 0x10	; 16
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	a0 e0       	ldi	r26, 0x00	; 0
    12dc:	b0 e0       	ldi	r27, 0x00	; 0
    12de:	20 e2       	ldi	r18, 0x20	; 32
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	40 e0       	ldi	r20, 0x00	; 0
    12e4:	50 e0       	ldi	r21, 0x00	; 0
    12e6:	28 1b       	sub	r18, r24
    12e8:	39 0b       	sbc	r19, r25
    12ea:	4a 0b       	sbc	r20, r26
    12ec:	5b 0b       	sbc	r21, r27
    12ee:	04 c0       	rjmp	.+8      	; 0x12f8 <__clzsi2+0x7e>
    12f0:	16 95       	lsr	r17
    12f2:	07 95       	ror	r16
    12f4:	f7 94       	ror	r15
    12f6:	e7 94       	ror	r14
    12f8:	8a 95       	dec	r24
    12fa:	d2 f7       	brpl	.-12     	; 0x12f0 <__clzsi2+0x76>
    12fc:	f7 01       	movw	r30, r14
    12fe:	e6 57       	subi	r30, 0x76	; 118
    1300:	ff 4f       	sbci	r31, 0xFF	; 255
    1302:	80 81       	ld	r24, Z
    1304:	28 1b       	sub	r18, r24
    1306:	31 09       	sbc	r19, r1
    1308:	41 09       	sbc	r20, r1
    130a:	51 09       	sbc	r21, r1
    130c:	c9 01       	movw	r24, r18
    130e:	1f 91       	pop	r17
    1310:	0f 91       	pop	r16
    1312:	ff 90       	pop	r15
    1314:	ef 90       	pop	r14
    1316:	08 95       	ret

00001318 <__pack_f>:
    1318:	df 92       	push	r13
    131a:	ef 92       	push	r14
    131c:	ff 92       	push	r15
    131e:	0f 93       	push	r16
    1320:	1f 93       	push	r17
    1322:	fc 01       	movw	r30, r24
    1324:	e4 80       	ldd	r14, Z+4	; 0x04
    1326:	f5 80       	ldd	r15, Z+5	; 0x05
    1328:	06 81       	ldd	r16, Z+6	; 0x06
    132a:	17 81       	ldd	r17, Z+7	; 0x07
    132c:	d1 80       	ldd	r13, Z+1	; 0x01
    132e:	80 81       	ld	r24, Z
    1330:	82 30       	cpi	r24, 0x02	; 2
    1332:	48 f4       	brcc	.+18     	; 0x1346 <__pack_f+0x2e>
    1334:	80 e0       	ldi	r24, 0x00	; 0
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	a0 e1       	ldi	r26, 0x10	; 16
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	e8 2a       	or	r14, r24
    133e:	f9 2a       	or	r15, r25
    1340:	0a 2b       	or	r16, r26
    1342:	1b 2b       	or	r17, r27
    1344:	a5 c0       	rjmp	.+330    	; 0x1490 <__pack_f+0x178>
    1346:	84 30       	cpi	r24, 0x04	; 4
    1348:	09 f4       	brne	.+2      	; 0x134c <__pack_f+0x34>
    134a:	9f c0       	rjmp	.+318    	; 0x148a <__pack_f+0x172>
    134c:	82 30       	cpi	r24, 0x02	; 2
    134e:	21 f4       	brne	.+8      	; 0x1358 <__pack_f+0x40>
    1350:	ee 24       	eor	r14, r14
    1352:	ff 24       	eor	r15, r15
    1354:	87 01       	movw	r16, r14
    1356:	05 c0       	rjmp	.+10     	; 0x1362 <__pack_f+0x4a>
    1358:	e1 14       	cp	r14, r1
    135a:	f1 04       	cpc	r15, r1
    135c:	01 05       	cpc	r16, r1
    135e:	11 05       	cpc	r17, r1
    1360:	19 f4       	brne	.+6      	; 0x1368 <__pack_f+0x50>
    1362:	e0 e0       	ldi	r30, 0x00	; 0
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	96 c0       	rjmp	.+300    	; 0x1494 <__pack_f+0x17c>
    1368:	62 81       	ldd	r22, Z+2	; 0x02
    136a:	73 81       	ldd	r23, Z+3	; 0x03
    136c:	9f ef       	ldi	r25, 0xFF	; 255
    136e:	62 38       	cpi	r22, 0x82	; 130
    1370:	79 07       	cpc	r23, r25
    1372:	0c f0       	brlt	.+2      	; 0x1376 <__pack_f+0x5e>
    1374:	5b c0       	rjmp	.+182    	; 0x142c <__pack_f+0x114>
    1376:	22 e8       	ldi	r18, 0x82	; 130
    1378:	3f ef       	ldi	r19, 0xFF	; 255
    137a:	26 1b       	sub	r18, r22
    137c:	37 0b       	sbc	r19, r23
    137e:	2a 31       	cpi	r18, 0x1A	; 26
    1380:	31 05       	cpc	r19, r1
    1382:	2c f0       	brlt	.+10     	; 0x138e <__pack_f+0x76>
    1384:	20 e0       	ldi	r18, 0x00	; 0
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	40 e0       	ldi	r20, 0x00	; 0
    138a:	50 e0       	ldi	r21, 0x00	; 0
    138c:	2a c0       	rjmp	.+84     	; 0x13e2 <__pack_f+0xca>
    138e:	b8 01       	movw	r22, r16
    1390:	a7 01       	movw	r20, r14
    1392:	02 2e       	mov	r0, r18
    1394:	04 c0       	rjmp	.+8      	; 0x139e <__pack_f+0x86>
    1396:	76 95       	lsr	r23
    1398:	67 95       	ror	r22
    139a:	57 95       	ror	r21
    139c:	47 95       	ror	r20
    139e:	0a 94       	dec	r0
    13a0:	d2 f7       	brpl	.-12     	; 0x1396 <__pack_f+0x7e>
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	a0 e0       	ldi	r26, 0x00	; 0
    13a8:	b0 e0       	ldi	r27, 0x00	; 0
    13aa:	04 c0       	rjmp	.+8      	; 0x13b4 <__pack_f+0x9c>
    13ac:	88 0f       	add	r24, r24
    13ae:	99 1f       	adc	r25, r25
    13b0:	aa 1f       	adc	r26, r26
    13b2:	bb 1f       	adc	r27, r27
    13b4:	2a 95       	dec	r18
    13b6:	d2 f7       	brpl	.-12     	; 0x13ac <__pack_f+0x94>
    13b8:	01 97       	sbiw	r24, 0x01	; 1
    13ba:	a1 09       	sbc	r26, r1
    13bc:	b1 09       	sbc	r27, r1
    13be:	8e 21       	and	r24, r14
    13c0:	9f 21       	and	r25, r15
    13c2:	a0 23       	and	r26, r16
    13c4:	b1 23       	and	r27, r17
    13c6:	00 97       	sbiw	r24, 0x00	; 0
    13c8:	a1 05       	cpc	r26, r1
    13ca:	b1 05       	cpc	r27, r1
    13cc:	21 f0       	breq	.+8      	; 0x13d6 <__pack_f+0xbe>
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	a0 e0       	ldi	r26, 0x00	; 0
    13d4:	b0 e0       	ldi	r27, 0x00	; 0
    13d6:	9a 01       	movw	r18, r20
    13d8:	ab 01       	movw	r20, r22
    13da:	28 2b       	or	r18, r24
    13dc:	39 2b       	or	r19, r25
    13de:	4a 2b       	or	r20, r26
    13e0:	5b 2b       	or	r21, r27
    13e2:	da 01       	movw	r26, r20
    13e4:	c9 01       	movw	r24, r18
    13e6:	8f 77       	andi	r24, 0x7F	; 127
    13e8:	90 70       	andi	r25, 0x00	; 0
    13ea:	a0 70       	andi	r26, 0x00	; 0
    13ec:	b0 70       	andi	r27, 0x00	; 0
    13ee:	80 34       	cpi	r24, 0x40	; 64
    13f0:	91 05       	cpc	r25, r1
    13f2:	a1 05       	cpc	r26, r1
    13f4:	b1 05       	cpc	r27, r1
    13f6:	39 f4       	brne	.+14     	; 0x1406 <__pack_f+0xee>
    13f8:	27 ff       	sbrs	r18, 7
    13fa:	09 c0       	rjmp	.+18     	; 0x140e <__pack_f+0xf6>
    13fc:	20 5c       	subi	r18, 0xC0	; 192
    13fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1400:	4f 4f       	sbci	r20, 0xFF	; 255
    1402:	5f 4f       	sbci	r21, 0xFF	; 255
    1404:	04 c0       	rjmp	.+8      	; 0x140e <__pack_f+0xf6>
    1406:	21 5c       	subi	r18, 0xC1	; 193
    1408:	3f 4f       	sbci	r19, 0xFF	; 255
    140a:	4f 4f       	sbci	r20, 0xFF	; 255
    140c:	5f 4f       	sbci	r21, 0xFF	; 255
    140e:	e0 e0       	ldi	r30, 0x00	; 0
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	20 30       	cpi	r18, 0x00	; 0
    1414:	a0 e0       	ldi	r26, 0x00	; 0
    1416:	3a 07       	cpc	r19, r26
    1418:	a0 e0       	ldi	r26, 0x00	; 0
    141a:	4a 07       	cpc	r20, r26
    141c:	a0 e4       	ldi	r26, 0x40	; 64
    141e:	5a 07       	cpc	r21, r26
    1420:	10 f0       	brcs	.+4      	; 0x1426 <__pack_f+0x10e>
    1422:	e1 e0       	ldi	r30, 0x01	; 1
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	79 01       	movw	r14, r18
    1428:	8a 01       	movw	r16, r20
    142a:	27 c0       	rjmp	.+78     	; 0x147a <__pack_f+0x162>
    142c:	60 38       	cpi	r22, 0x80	; 128
    142e:	71 05       	cpc	r23, r1
    1430:	64 f5       	brge	.+88     	; 0x148a <__pack_f+0x172>
    1432:	fb 01       	movw	r30, r22
    1434:	e1 58       	subi	r30, 0x81	; 129
    1436:	ff 4f       	sbci	r31, 0xFF	; 255
    1438:	d8 01       	movw	r26, r16
    143a:	c7 01       	movw	r24, r14
    143c:	8f 77       	andi	r24, 0x7F	; 127
    143e:	90 70       	andi	r25, 0x00	; 0
    1440:	a0 70       	andi	r26, 0x00	; 0
    1442:	b0 70       	andi	r27, 0x00	; 0
    1444:	80 34       	cpi	r24, 0x40	; 64
    1446:	91 05       	cpc	r25, r1
    1448:	a1 05       	cpc	r26, r1
    144a:	b1 05       	cpc	r27, r1
    144c:	39 f4       	brne	.+14     	; 0x145c <__pack_f+0x144>
    144e:	e7 fe       	sbrs	r14, 7
    1450:	0d c0       	rjmp	.+26     	; 0x146c <__pack_f+0x154>
    1452:	80 e4       	ldi	r24, 0x40	; 64
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	a0 e0       	ldi	r26, 0x00	; 0
    1458:	b0 e0       	ldi	r27, 0x00	; 0
    145a:	04 c0       	rjmp	.+8      	; 0x1464 <__pack_f+0x14c>
    145c:	8f e3       	ldi	r24, 0x3F	; 63
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	a0 e0       	ldi	r26, 0x00	; 0
    1462:	b0 e0       	ldi	r27, 0x00	; 0
    1464:	e8 0e       	add	r14, r24
    1466:	f9 1e       	adc	r15, r25
    1468:	0a 1f       	adc	r16, r26
    146a:	1b 1f       	adc	r17, r27
    146c:	17 ff       	sbrs	r17, 7
    146e:	05 c0       	rjmp	.+10     	; 0x147a <__pack_f+0x162>
    1470:	16 95       	lsr	r17
    1472:	07 95       	ror	r16
    1474:	f7 94       	ror	r15
    1476:	e7 94       	ror	r14
    1478:	31 96       	adiw	r30, 0x01	; 1
    147a:	87 e0       	ldi	r24, 0x07	; 7
    147c:	16 95       	lsr	r17
    147e:	07 95       	ror	r16
    1480:	f7 94       	ror	r15
    1482:	e7 94       	ror	r14
    1484:	8a 95       	dec	r24
    1486:	d1 f7       	brne	.-12     	; 0x147c <__pack_f+0x164>
    1488:	05 c0       	rjmp	.+10     	; 0x1494 <__pack_f+0x17c>
    148a:	ee 24       	eor	r14, r14
    148c:	ff 24       	eor	r15, r15
    148e:	87 01       	movw	r16, r14
    1490:	ef ef       	ldi	r30, 0xFF	; 255
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	6e 2f       	mov	r22, r30
    1496:	67 95       	ror	r22
    1498:	66 27       	eor	r22, r22
    149a:	67 95       	ror	r22
    149c:	90 2f       	mov	r25, r16
    149e:	9f 77       	andi	r25, 0x7F	; 127
    14a0:	d7 94       	ror	r13
    14a2:	dd 24       	eor	r13, r13
    14a4:	d7 94       	ror	r13
    14a6:	8e 2f       	mov	r24, r30
    14a8:	86 95       	lsr	r24
    14aa:	49 2f       	mov	r20, r25
    14ac:	46 2b       	or	r20, r22
    14ae:	58 2f       	mov	r21, r24
    14b0:	5d 29       	or	r21, r13
    14b2:	b7 01       	movw	r22, r14
    14b4:	ca 01       	movw	r24, r20
    14b6:	1f 91       	pop	r17
    14b8:	0f 91       	pop	r16
    14ba:	ff 90       	pop	r15
    14bc:	ef 90       	pop	r14
    14be:	df 90       	pop	r13
    14c0:	08 95       	ret

000014c2 <__unpack_f>:
    14c2:	fc 01       	movw	r30, r24
    14c4:	db 01       	movw	r26, r22
    14c6:	40 81       	ld	r20, Z
    14c8:	51 81       	ldd	r21, Z+1	; 0x01
    14ca:	22 81       	ldd	r18, Z+2	; 0x02
    14cc:	62 2f       	mov	r22, r18
    14ce:	6f 77       	andi	r22, 0x7F	; 127
    14d0:	70 e0       	ldi	r23, 0x00	; 0
    14d2:	22 1f       	adc	r18, r18
    14d4:	22 27       	eor	r18, r18
    14d6:	22 1f       	adc	r18, r18
    14d8:	93 81       	ldd	r25, Z+3	; 0x03
    14da:	89 2f       	mov	r24, r25
    14dc:	88 0f       	add	r24, r24
    14de:	82 2b       	or	r24, r18
    14e0:	28 2f       	mov	r18, r24
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	99 1f       	adc	r25, r25
    14e6:	99 27       	eor	r25, r25
    14e8:	99 1f       	adc	r25, r25
    14ea:	11 96       	adiw	r26, 0x01	; 1
    14ec:	9c 93       	st	X, r25
    14ee:	11 97       	sbiw	r26, 0x01	; 1
    14f0:	21 15       	cp	r18, r1
    14f2:	31 05       	cpc	r19, r1
    14f4:	a9 f5       	brne	.+106    	; 0x1560 <__unpack_f+0x9e>
    14f6:	41 15       	cp	r20, r1
    14f8:	51 05       	cpc	r21, r1
    14fa:	61 05       	cpc	r22, r1
    14fc:	71 05       	cpc	r23, r1
    14fe:	11 f4       	brne	.+4      	; 0x1504 <__unpack_f+0x42>
    1500:	82 e0       	ldi	r24, 0x02	; 2
    1502:	37 c0       	rjmp	.+110    	; 0x1572 <__unpack_f+0xb0>
    1504:	82 e8       	ldi	r24, 0x82	; 130
    1506:	9f ef       	ldi	r25, 0xFF	; 255
    1508:	13 96       	adiw	r26, 0x03	; 3
    150a:	9c 93       	st	X, r25
    150c:	8e 93       	st	-X, r24
    150e:	12 97       	sbiw	r26, 0x02	; 2
    1510:	9a 01       	movw	r18, r20
    1512:	ab 01       	movw	r20, r22
    1514:	67 e0       	ldi	r22, 0x07	; 7
    1516:	22 0f       	add	r18, r18
    1518:	33 1f       	adc	r19, r19
    151a:	44 1f       	adc	r20, r20
    151c:	55 1f       	adc	r21, r21
    151e:	6a 95       	dec	r22
    1520:	d1 f7       	brne	.-12     	; 0x1516 <__unpack_f+0x54>
    1522:	83 e0       	ldi	r24, 0x03	; 3
    1524:	8c 93       	st	X, r24
    1526:	0d c0       	rjmp	.+26     	; 0x1542 <__unpack_f+0x80>
    1528:	22 0f       	add	r18, r18
    152a:	33 1f       	adc	r19, r19
    152c:	44 1f       	adc	r20, r20
    152e:	55 1f       	adc	r21, r21
    1530:	12 96       	adiw	r26, 0x02	; 2
    1532:	8d 91       	ld	r24, X+
    1534:	9c 91       	ld	r25, X
    1536:	13 97       	sbiw	r26, 0x03	; 3
    1538:	01 97       	sbiw	r24, 0x01	; 1
    153a:	13 96       	adiw	r26, 0x03	; 3
    153c:	9c 93       	st	X, r25
    153e:	8e 93       	st	-X, r24
    1540:	12 97       	sbiw	r26, 0x02	; 2
    1542:	20 30       	cpi	r18, 0x00	; 0
    1544:	80 e0       	ldi	r24, 0x00	; 0
    1546:	38 07       	cpc	r19, r24
    1548:	80 e0       	ldi	r24, 0x00	; 0
    154a:	48 07       	cpc	r20, r24
    154c:	80 e4       	ldi	r24, 0x40	; 64
    154e:	58 07       	cpc	r21, r24
    1550:	58 f3       	brcs	.-42     	; 0x1528 <__unpack_f+0x66>
    1552:	14 96       	adiw	r26, 0x04	; 4
    1554:	2d 93       	st	X+, r18
    1556:	3d 93       	st	X+, r19
    1558:	4d 93       	st	X+, r20
    155a:	5c 93       	st	X, r21
    155c:	17 97       	sbiw	r26, 0x07	; 7
    155e:	08 95       	ret
    1560:	2f 3f       	cpi	r18, 0xFF	; 255
    1562:	31 05       	cpc	r19, r1
    1564:	79 f4       	brne	.+30     	; 0x1584 <__unpack_f+0xc2>
    1566:	41 15       	cp	r20, r1
    1568:	51 05       	cpc	r21, r1
    156a:	61 05       	cpc	r22, r1
    156c:	71 05       	cpc	r23, r1
    156e:	19 f4       	brne	.+6      	; 0x1576 <__unpack_f+0xb4>
    1570:	84 e0       	ldi	r24, 0x04	; 4
    1572:	8c 93       	st	X, r24
    1574:	08 95       	ret
    1576:	64 ff       	sbrs	r22, 4
    1578:	03 c0       	rjmp	.+6      	; 0x1580 <__unpack_f+0xbe>
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	8c 93       	st	X, r24
    157e:	12 c0       	rjmp	.+36     	; 0x15a4 <__unpack_f+0xe2>
    1580:	1c 92       	st	X, r1
    1582:	10 c0       	rjmp	.+32     	; 0x15a4 <__unpack_f+0xe2>
    1584:	2f 57       	subi	r18, 0x7F	; 127
    1586:	30 40       	sbci	r19, 0x00	; 0
    1588:	13 96       	adiw	r26, 0x03	; 3
    158a:	3c 93       	st	X, r19
    158c:	2e 93       	st	-X, r18
    158e:	12 97       	sbiw	r26, 0x02	; 2
    1590:	83 e0       	ldi	r24, 0x03	; 3
    1592:	8c 93       	st	X, r24
    1594:	87 e0       	ldi	r24, 0x07	; 7
    1596:	44 0f       	add	r20, r20
    1598:	55 1f       	adc	r21, r21
    159a:	66 1f       	adc	r22, r22
    159c:	77 1f       	adc	r23, r23
    159e:	8a 95       	dec	r24
    15a0:	d1 f7       	brne	.-12     	; 0x1596 <__unpack_f+0xd4>
    15a2:	70 64       	ori	r23, 0x40	; 64
    15a4:	14 96       	adiw	r26, 0x04	; 4
    15a6:	4d 93       	st	X+, r20
    15a8:	5d 93       	st	X+, r21
    15aa:	6d 93       	st	X+, r22
    15ac:	7c 93       	st	X, r23
    15ae:	17 97       	sbiw	r26, 0x07	; 7
    15b0:	08 95       	ret

000015b2 <__fpcmp_parts_f>:
    15b2:	1f 93       	push	r17
    15b4:	dc 01       	movw	r26, r24
    15b6:	fb 01       	movw	r30, r22
    15b8:	9c 91       	ld	r25, X
    15ba:	92 30       	cpi	r25, 0x02	; 2
    15bc:	08 f4       	brcc	.+2      	; 0x15c0 <__fpcmp_parts_f+0xe>
    15be:	47 c0       	rjmp	.+142    	; 0x164e <__fpcmp_parts_f+0x9c>
    15c0:	80 81       	ld	r24, Z
    15c2:	82 30       	cpi	r24, 0x02	; 2
    15c4:	08 f4       	brcc	.+2      	; 0x15c8 <__fpcmp_parts_f+0x16>
    15c6:	43 c0       	rjmp	.+134    	; 0x164e <__fpcmp_parts_f+0x9c>
    15c8:	94 30       	cpi	r25, 0x04	; 4
    15ca:	51 f4       	brne	.+20     	; 0x15e0 <__fpcmp_parts_f+0x2e>
    15cc:	11 96       	adiw	r26, 0x01	; 1
    15ce:	1c 91       	ld	r17, X
    15d0:	84 30       	cpi	r24, 0x04	; 4
    15d2:	99 f5       	brne	.+102    	; 0x163a <__fpcmp_parts_f+0x88>
    15d4:	81 81       	ldd	r24, Z+1	; 0x01
    15d6:	68 2f       	mov	r22, r24
    15d8:	70 e0       	ldi	r23, 0x00	; 0
    15da:	61 1b       	sub	r22, r17
    15dc:	71 09       	sbc	r23, r1
    15de:	3f c0       	rjmp	.+126    	; 0x165e <__fpcmp_parts_f+0xac>
    15e0:	84 30       	cpi	r24, 0x04	; 4
    15e2:	21 f0       	breq	.+8      	; 0x15ec <__fpcmp_parts_f+0x3a>
    15e4:	92 30       	cpi	r25, 0x02	; 2
    15e6:	31 f4       	brne	.+12     	; 0x15f4 <__fpcmp_parts_f+0x42>
    15e8:	82 30       	cpi	r24, 0x02	; 2
    15ea:	b9 f1       	breq	.+110    	; 0x165a <__fpcmp_parts_f+0xa8>
    15ec:	81 81       	ldd	r24, Z+1	; 0x01
    15ee:	88 23       	and	r24, r24
    15f0:	89 f1       	breq	.+98     	; 0x1654 <__fpcmp_parts_f+0xa2>
    15f2:	2d c0       	rjmp	.+90     	; 0x164e <__fpcmp_parts_f+0x9c>
    15f4:	11 96       	adiw	r26, 0x01	; 1
    15f6:	1c 91       	ld	r17, X
    15f8:	11 97       	sbiw	r26, 0x01	; 1
    15fa:	82 30       	cpi	r24, 0x02	; 2
    15fc:	f1 f0       	breq	.+60     	; 0x163a <__fpcmp_parts_f+0x88>
    15fe:	81 81       	ldd	r24, Z+1	; 0x01
    1600:	18 17       	cp	r17, r24
    1602:	d9 f4       	brne	.+54     	; 0x163a <__fpcmp_parts_f+0x88>
    1604:	12 96       	adiw	r26, 0x02	; 2
    1606:	2d 91       	ld	r18, X+
    1608:	3c 91       	ld	r19, X
    160a:	13 97       	sbiw	r26, 0x03	; 3
    160c:	82 81       	ldd	r24, Z+2	; 0x02
    160e:	93 81       	ldd	r25, Z+3	; 0x03
    1610:	82 17       	cp	r24, r18
    1612:	93 07       	cpc	r25, r19
    1614:	94 f0       	brlt	.+36     	; 0x163a <__fpcmp_parts_f+0x88>
    1616:	28 17       	cp	r18, r24
    1618:	39 07       	cpc	r19, r25
    161a:	bc f0       	brlt	.+46     	; 0x164a <__fpcmp_parts_f+0x98>
    161c:	14 96       	adiw	r26, 0x04	; 4
    161e:	8d 91       	ld	r24, X+
    1620:	9d 91       	ld	r25, X+
    1622:	0d 90       	ld	r0, X+
    1624:	bc 91       	ld	r27, X
    1626:	a0 2d       	mov	r26, r0
    1628:	24 81       	ldd	r18, Z+4	; 0x04
    162a:	35 81       	ldd	r19, Z+5	; 0x05
    162c:	46 81       	ldd	r20, Z+6	; 0x06
    162e:	57 81       	ldd	r21, Z+7	; 0x07
    1630:	28 17       	cp	r18, r24
    1632:	39 07       	cpc	r19, r25
    1634:	4a 07       	cpc	r20, r26
    1636:	5b 07       	cpc	r21, r27
    1638:	18 f4       	brcc	.+6      	; 0x1640 <__fpcmp_parts_f+0x8e>
    163a:	11 23       	and	r17, r17
    163c:	41 f0       	breq	.+16     	; 0x164e <__fpcmp_parts_f+0x9c>
    163e:	0a c0       	rjmp	.+20     	; 0x1654 <__fpcmp_parts_f+0xa2>
    1640:	82 17       	cp	r24, r18
    1642:	93 07       	cpc	r25, r19
    1644:	a4 07       	cpc	r26, r20
    1646:	b5 07       	cpc	r27, r21
    1648:	40 f4       	brcc	.+16     	; 0x165a <__fpcmp_parts_f+0xa8>
    164a:	11 23       	and	r17, r17
    164c:	19 f0       	breq	.+6      	; 0x1654 <__fpcmp_parts_f+0xa2>
    164e:	61 e0       	ldi	r22, 0x01	; 1
    1650:	70 e0       	ldi	r23, 0x00	; 0
    1652:	05 c0       	rjmp	.+10     	; 0x165e <__fpcmp_parts_f+0xac>
    1654:	6f ef       	ldi	r22, 0xFF	; 255
    1656:	7f ef       	ldi	r23, 0xFF	; 255
    1658:	02 c0       	rjmp	.+4      	; 0x165e <__fpcmp_parts_f+0xac>
    165a:	60 e0       	ldi	r22, 0x00	; 0
    165c:	70 e0       	ldi	r23, 0x00	; 0
    165e:	cb 01       	movw	r24, r22
    1660:	1f 91       	pop	r17
    1662:	08 95       	ret

00001664 <__udivmodhi4>:
    1664:	aa 1b       	sub	r26, r26
    1666:	bb 1b       	sub	r27, r27
    1668:	51 e1       	ldi	r21, 0x11	; 17
    166a:	07 c0       	rjmp	.+14     	; 0x167a <__udivmodhi4_ep>

0000166c <__udivmodhi4_loop>:
    166c:	aa 1f       	adc	r26, r26
    166e:	bb 1f       	adc	r27, r27
    1670:	a6 17       	cp	r26, r22
    1672:	b7 07       	cpc	r27, r23
    1674:	10 f0       	brcs	.+4      	; 0x167a <__udivmodhi4_ep>
    1676:	a6 1b       	sub	r26, r22
    1678:	b7 0b       	sbc	r27, r23

0000167a <__udivmodhi4_ep>:
    167a:	88 1f       	adc	r24, r24
    167c:	99 1f       	adc	r25, r25
    167e:	5a 95       	dec	r21
    1680:	a9 f7       	brne	.-22     	; 0x166c <__udivmodhi4_loop>
    1682:	80 95       	com	r24
    1684:	90 95       	com	r25
    1686:	bc 01       	movw	r22, r24
    1688:	cd 01       	movw	r24, r26
    168a:	08 95       	ret

0000168c <__udivmodsi4>:
    168c:	a1 e2       	ldi	r26, 0x21	; 33
    168e:	1a 2e       	mov	r1, r26
    1690:	aa 1b       	sub	r26, r26
    1692:	bb 1b       	sub	r27, r27
    1694:	fd 01       	movw	r30, r26
    1696:	0d c0       	rjmp	.+26     	; 0x16b2 <__udivmodsi4_ep>

00001698 <__udivmodsi4_loop>:
    1698:	aa 1f       	adc	r26, r26
    169a:	bb 1f       	adc	r27, r27
    169c:	ee 1f       	adc	r30, r30
    169e:	ff 1f       	adc	r31, r31
    16a0:	a2 17       	cp	r26, r18
    16a2:	b3 07       	cpc	r27, r19
    16a4:	e4 07       	cpc	r30, r20
    16a6:	f5 07       	cpc	r31, r21
    16a8:	20 f0       	brcs	.+8      	; 0x16b2 <__udivmodsi4_ep>
    16aa:	a2 1b       	sub	r26, r18
    16ac:	b3 0b       	sbc	r27, r19
    16ae:	e4 0b       	sbc	r30, r20
    16b0:	f5 0b       	sbc	r31, r21

000016b2 <__udivmodsi4_ep>:
    16b2:	66 1f       	adc	r22, r22
    16b4:	77 1f       	adc	r23, r23
    16b6:	88 1f       	adc	r24, r24
    16b8:	99 1f       	adc	r25, r25
    16ba:	1a 94       	dec	r1
    16bc:	69 f7       	brne	.-38     	; 0x1698 <__udivmodsi4_loop>
    16be:	60 95       	com	r22
    16c0:	70 95       	com	r23
    16c2:	80 95       	com	r24
    16c4:	90 95       	com	r25
    16c6:	9b 01       	movw	r18, r22
    16c8:	ac 01       	movw	r20, r24
    16ca:	bd 01       	movw	r22, r26
    16cc:	cf 01       	movw	r24, r30
    16ce:	08 95       	ret

000016d0 <__prologue_saves__>:
    16d0:	2f 92       	push	r2
    16d2:	3f 92       	push	r3
    16d4:	4f 92       	push	r4
    16d6:	5f 92       	push	r5
    16d8:	6f 92       	push	r6
    16da:	7f 92       	push	r7
    16dc:	8f 92       	push	r8
    16de:	9f 92       	push	r9
    16e0:	af 92       	push	r10
    16e2:	bf 92       	push	r11
    16e4:	cf 92       	push	r12
    16e6:	df 92       	push	r13
    16e8:	ef 92       	push	r14
    16ea:	ff 92       	push	r15
    16ec:	0f 93       	push	r16
    16ee:	1f 93       	push	r17
    16f0:	cf 93       	push	r28
    16f2:	df 93       	push	r29
    16f4:	cd b7       	in	r28, 0x3d	; 61
    16f6:	de b7       	in	r29, 0x3e	; 62
    16f8:	ca 1b       	sub	r28, r26
    16fa:	db 0b       	sbc	r29, r27
    16fc:	0f b6       	in	r0, 0x3f	; 63
    16fe:	f8 94       	cli
    1700:	de bf       	out	0x3e, r29	; 62
    1702:	0f be       	out	0x3f, r0	; 63
    1704:	cd bf       	out	0x3d, r28	; 61
    1706:	09 94       	ijmp

00001708 <__epilogue_restores__>:
    1708:	2a 88       	ldd	r2, Y+18	; 0x12
    170a:	39 88       	ldd	r3, Y+17	; 0x11
    170c:	48 88       	ldd	r4, Y+16	; 0x10
    170e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1710:	6e 84       	ldd	r6, Y+14	; 0x0e
    1712:	7d 84       	ldd	r7, Y+13	; 0x0d
    1714:	8c 84       	ldd	r8, Y+12	; 0x0c
    1716:	9b 84       	ldd	r9, Y+11	; 0x0b
    1718:	aa 84       	ldd	r10, Y+10	; 0x0a
    171a:	b9 84       	ldd	r11, Y+9	; 0x09
    171c:	c8 84       	ldd	r12, Y+8	; 0x08
    171e:	df 80       	ldd	r13, Y+7	; 0x07
    1720:	ee 80       	ldd	r14, Y+6	; 0x06
    1722:	fd 80       	ldd	r15, Y+5	; 0x05
    1724:	0c 81       	ldd	r16, Y+4	; 0x04
    1726:	1b 81       	ldd	r17, Y+3	; 0x03
    1728:	aa 81       	ldd	r26, Y+2	; 0x02
    172a:	b9 81       	ldd	r27, Y+1	; 0x01
    172c:	ce 0f       	add	r28, r30
    172e:	d1 1d       	adc	r29, r1
    1730:	0f b6       	in	r0, 0x3f	; 63
    1732:	f8 94       	cli
    1734:	de bf       	out	0x3e, r29	; 62
    1736:	0f be       	out	0x3f, r0	; 63
    1738:	cd bf       	out	0x3d, r28	; 61
    173a:	ed 01       	movw	r28, r26
    173c:	08 95       	ret

0000173e <_exit>:
    173e:	f8 94       	cli

00001740 <__stop_program>:
    1740:	ff cf       	rjmp	.-2      	; 0x1740 <__stop_program>
